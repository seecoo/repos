// Automatically generated codes
// Generated Date and Time 20090502105515
// Generated by ud090401

#ifndef _unionTableField_
#define _unionTableField_


// 定义表的域名常量
#define conTableFieldFldNameFieldName		"fieldName"
#define conTableFieldFldNameFieldType		"fieldType"
#define conTableFieldFldNameID		"ID"
#define conTableFieldFldNameSize		"size"
#define conTableFieldFldNameNullPermitted		"nullPermitted"
#define conTableFieldFldNameDefaultValue		"defaultValue"
#define conTableFieldFldNameValue		"value"
#define conTableFieldFldNameRemark		"remark"
#define conTableFieldFldNameConstraint		"valueConstraint"
#define conTableFieldFldNameInputTeller		"inputTeller"
#define conTableFieldFldNameInputDate		"inputDate"
#define conTableFieldFldNameInputTime		"inputTime"
#define conTableFieldFldNameUpdateTeller		"updateTeller"
#define conTableFieldFldNameUpdateDate		"updateDate"
#define conTableFieldFldNameUpdateTime		"updateTime"

#define conTableFieldFldNameDisplayName		"displayName"
#define conTableFieldFldNameCompilerSwitch	"compilerSwitch"


// 定义表记录对应的结构
typedef struct
{
	char	fieldName[40+1];	// 域名称，在表中以该域表示域名
	int	fieldType;	// 域的类型
	char	ID[40+1];	// 用户定义的域的标识
	int	size;	// 域的大小，只有字符串时，才需要定义
	int	nullPermitted;	// 是否允许域为空
	char	defaultValue[512+1];	// 域的缺省值
	char	value[512+1];	// 域的赋值方法
	char	remark[128+1];	// 域的说明
	char	valueConstraint[40+1];	// 取值限制
	char	inputTeller[20+1];
	char	inputDate[8+1];
	char	inputTime[6+1];
	char	updateTeller[20+1];
	char	updateDate[8+1];
	char	updateTime[6+1];
} TUnionTableField;
typedef TUnionTableField	*PUnionTableField;

// 2010-8-1，王纯军增加
typedef TUnionTableField	TUnionTableField_1_x;
typedef TUnionTableField	*PUnionTableField_1_x;
// 定义表记录对应的结构
typedef struct
{
	TUnionTableField_1_x	fld_1_x;
	char			displayName[40+1];	// 显示名称
	char			compilerSwitch[80+1];	// 编译开关
} TUnionTableField_2_x;
typedef TUnionTableField_2_x	*PUnionTableField_2_x;
// 2010-8-1，王纯军增加结束

//***** 以下定义函数声明 *****

/*
功能：
	读取一个记录
输入参数:
	prec	记录指针，必须对关键字域赋值
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionReadTableField_1_xRec(PUnionTableField_1_x prec);

/*
功能：
	读取指定域标识的域名称和域别名
输入参数:
	fldID		域标识
输出参数:
	fldName		域名称
	fldAlais	域别名
返回值
	>=0		成功
	<0		失败,错误码
*/
int UnionGetFldNameAndFldAlaisOfSpecFld(char *fldID,char *fldName,char *fldAlais);

/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormTableField_2_x_RecFromRecStr(char *recStr,int lenOfRecStr,PUnionTableField_2_x prec);

/*
功能：
	结构的缺省赋值函数
输入参数:
	prec	记录指针
输出参数:
	无
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormDefaultValueOfTableFieldRec(PUnionTableField prec);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormRecStrFromTableFieldRec(PUnionTableField prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormTableFieldRecFromRecStr(char *recStr,int lenOfRecStr,PUnionTableField prec);


/*
功能：
	插入一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionInsertTableFieldRec(PUnionTableField prec);


/*
功能：
	删除一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionDeleteTableFieldRec(PUnionTableField prec);


/*
功能：
	修改一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionUpdateTableFieldRec(PUnionTableField prec);


/*
功能：
	读取一个记录
输入参数:
	fldID	域标识
	prec	记录指针，必须对关键字域赋值
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionReadTableField_2_x_Rec(char *fldID,PUnionTableField_2_x prec);

/*
功能：
	读取一个记录
输入参数:
	prec	记录指针，必须对关键字域赋值
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionReadTableFieldRec(PUnionTableField prec);

/*
功能：
	根据域标识读取一个域名称
输入参数:
	fldID	域标识
输出参数:
	fldName	域名称
返回值
	>=0		成功，返回域名称的长度
	<0		失败,错误码
*/
int UnionReadTableFldNameByFldID(char *fldID,char *fldName);

//***** 函数声明结束 *****

#endif
