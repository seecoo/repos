// Automatically generated codes
// Generated Date and Time 20091216191701
// Generated by ud090401

#ifndef _unionEnumValueDef_
#define _unionEnumValueDef_


// 定义表的域名常量
#define conEnumValueDefFldNameMainMenuName		"mainMenuName"
#define conEnumValueDefFldNameEnumFileName		"enumFileName"
#define conEnumValueDefFldNameItemName		"itemName"
#define conEnumValueDefFldNameItemValue		"itemValue"
#define conEnumValueDefFldNameVisualLevelListOfEnum		"visualLevelListOfEnum"
#define conEnumValueDefFldNameRemark		"remark"
#define conEnumValueDefFldNameInputTeller		"inputTeller"
#define conEnumValueDefFldNameInputDate		"inputDate"
#define conEnumValueDefFldNameInputTime		"inputTime"
#define conEnumValueDefFldNameUpdateTeller		"updateTeller"
#define conEnumValueDefFldNameUpdateDate		"updateDate"
#define conEnumValueDefFldNameUpdateTime		"updateTime"

/*
*** 结构对应的表信息 ***
表名::          enumValueDef
表名宏定义::    conTBLNameEnumValueDef
表资源宏定义::  conResIDEnumValueDef
关键字::        mainMenuName,enumFileName,itemName
*/

// 定义表记录对应的结构
typedef struct
{
	char	mainMenuName[128+1];	// 主菜单名称
	char	enumFileName[128+1];	// 枚举文件名
	char	itemName[128+1];	// 枚举显示名称
	char	itemValue[128+1];	// 枚举值
	char	visualLevelListOfEnum[256+1];	// 枚举可视级别清单
	char	remark[128+1];	// 128个字符的说明
	char	inputTeller[20+1];	// 记录插入数据库时，系统自动附加的操作员标识
	char	inputDate[8+1];	// 记录插入数据库时，系统自动附加的日期
	char	inputTime[6+1];	// 记录插入数据库时，系统自动附加的时间
	char	updateTeller[20+1];	// 记录修改时，系统自动附加的操作员标识
	char	updateDate[8+1];	// 记录修改时，系统自动附加的日期
	char	updateTime[6+1];	// 记录修改时，系统自动附加的时间
} TUnionEnumValueDef;
typedef TUnionEnumValueDef	*PUnionEnumValueDef;

//***** 以下定义函数声明 *****


/*
功能：
	结构的缺省赋值函数
输入参数:
	prec	记录指针
输出参数:
	无
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormDefaultValueOfEnumValueDefRec(PUnionEnumValueDef prec);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormRecStrFromEnumValueDefRec(PUnionEnumValueDef prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormPrimaryKeyRecStrFromEnumValueDefRec(PUnionEnumValueDef prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录字串转换为记录结构的关键字的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormPrimaryKeyOfEnumValueDefRecFromRecStr(char *recStr,int lenOfRecStr,PUnionEnumValueDef prec);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormNonPrimaryKeyRecStrFromEnumValueDefRec(PUnionEnumValueDef prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormEnumValueDefRecFromRecStr(char *recStr,int lenOfRecStr,PUnionEnumValueDef prec);


/*
功能：
	插入一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionInsertEnumValueDefRec(PUnionEnumValueDef prec);


/*
功能：
	删除一个记录
输入参数:
	mainMenuName 主菜单名称
	enumFileName 枚举文件名
	itemName 枚举显示名称
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionDeleteEnumValueDefRec(char *mainMenuName,char *enumFileName,char *itemName);
/*
函数功能:
	修改指定的表域:
输入参数:
	mainMenuName 主菜单名称
	enumFileName 枚举文件名
	itemName 枚举显示名称
	fldName 域名称
	fldValue 域值
	fldValueLen 域值长度
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionUpdateSpecFldOfEnumValueDefRec(char *mainMenuName,char *enumFileName,char *itemName,char *fldName,char *fldValue,int lenOfFldValue);
/*
函数功能:
	修改指定的表域:
输入参数:
	mainMenuName 主菜单名称
	enumFileName 枚举文件名
	itemName 枚举显示名称
	fldName 域名称
	fldValue 域值
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionUpdateIntTypeSpecFldOfEnumValueDefRec(char *mainMenuName,char *enumFileName,char *itemName,char *fldName,int fldValue);


/*
功能：
	修改一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionUpdateEnumValueDefRec(PUnionEnumValueDef prec);


/*
功能：
	读取一个记录
输入参数:
	mainMenuName 主菜单名称
	enumFileName 枚举文件名
	itemName 枚举显示名称
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionReadEnumValueDefRec(char *mainMenuName,char *enumFileName,char *itemName,PUnionEnumValueDef prec);


/*
功能：
	读取一个记录
输入参数:
	mainMenuName 主菜单名称
	enumFileName 枚举文件名
	itemName 枚举显示名称
	fldName		域名
	sizeOfBuf	域值缓冲大小
输出参数:
	fldValue	域值
返回值
	>=0		成功，返回域值的长度
	<0		失败,错误码
*/
int UnionReadEnumValueDefRecFld(char *mainMenuName,char *enumFileName,char *itemName,char *fldName,char *fldValue,int sizeOfBuf);


/*
功能：
	读取一个记录
输入参数:
	mainMenuName 主菜单名称
	enumFileName 枚举文件名
	itemName 枚举显示名称
	fldName		域名
输出参数:
	fldValue	域值
返回值
	>=0		成功，返回域值的长度
	<0		失败,错误码
*/
int UnionReadEnumValueDefRecIntTypeFld(char *mainMenuName,char *enumFileName,char *itemName,char *fldName,int *fldValue);


/*
功能：
	根据条件，批量读取数据
输入参数:
	condition	条件字串
	maxRecNum		读取的最大记录数量
输出参数:
	recGrp		记录数组
返回值
	>=0		成功,读取的记录数量
	<0		失败,错误码
*/
int UnionBatchReadEnumValueDefRec(char *condition,TUnionEnumValueDef recGrp[],int maxRecNum);

//***** 函数声明结束 *****

#endif
