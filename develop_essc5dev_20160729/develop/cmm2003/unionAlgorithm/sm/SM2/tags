!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
A	miracl.h	/^big A,B;$/;"	m
AA	miracl.h	/^int M,AA,BB,CC;     \/* for GF(2^m) curves *\/$/;"	m
ACTIVE	miracl.h	/^BOOL ACTIVE;$/;"	m
ASM	miracl.h	1328;"	d
ASM	miracl.h	1332;"	d
ASM	miracl.h	1336;"	d
Asize	miracl.h	/^int Asize,Bsize;$/;"	m
B	miracl.h	/^big A,B;$/;"	m
BB	miracl.h	/^int M,AA,BB,CC;     \/* for GF(2^m) curves *\/$/;"	m
BIGS	miracl.h	117;"	d
BOOL	miracl.h	/^typedef int BOOL;$/;"	t
Bsize	miracl.h	/^int Asize,Bsize;$/;"	m
C	miracl.h	/^big *C;$/;"	m
C	miracl.h	/^mr_utype *C;$/;"	m
CC	miracl.h	/^int M,AA,BB,CC;     \/* for GF(2^m) curves *\/$/;"	m
COMPILE	makefile	/^COMPILE	= $(CC) $(DEFINES) $(INCL) -c$/;"	m
Ch	mrshs256.c	40;"	d	file:
Ch	mrshs512.c	111;"	d	file:
D	miracl.h	/^double D;$/;"	m
DEFINES	makefile	/^DEFINES = $(OSSPEC)$/;"	m
DEPEND	makefile	/^DEPEND	= $(CC) $(INCL) -MM -c$/;"	m
ERCON	miracl.h	/^BOOL ERCON;        \/* error control   *\/$/;"	m
ERNUM	miracl.h	/^int  ERNUM;        \/* last error code *\/$/;"	m
EXACT	miracl.h	/^BOOL EXACT;        \/* exact flag      *\/$/;"	m
Ecc256	sm2.c	/^struct FPECC Ecc256={$/;"	v
F0	mrshs.c	42;"	d	file:
F1	mrshs.c	43;"	d	file:
F2	mrshs.c	44;"	d	file:
F3	mrshs.c	45;"	d	file:
FALSE	miracl.h	186;"	d
FIX	mrshs.c	14;"	d	file:
FPECC	sm2.c	/^struct FPECC{$/;"	s	file:
GCM_ACCEPTING_CIPHER	miracl.h	399;"	d
GCM_ACCEPTING_HEADER	miracl.h	398;"	d
GCM_DECRYPTING	miracl.h	403;"	d
GCM_ENCRYPTING	miracl.h	402;"	d
GCM_FINISHED	miracl.h	401;"	d
GCM_NOT_ACCEPTING_MORE	miracl.h	400;"	d
GF2MS	miracl.h	123;"	d
H0	mrshs.c	24;"	d	file:
H0	mrshs256.c	13;"	d	file:
H0	mrshs512.c	19;"	d	file:
H0	mrshs512.c	37;"	d	file:
H1	mrshs.c	25;"	d	file:
H1	mrshs256.c	14;"	d	file:
H1	mrshs512.c	20;"	d	file:
H1	mrshs512.c	38;"	d	file:
H2	mrshs.c	26;"	d	file:
H2	mrshs256.c	15;"	d	file:
H2	mrshs512.c	21;"	d	file:
H2	mrshs512.c	39;"	d	file:
H3	mrshs.c	27;"	d	file:
H3	mrshs256.c	16;"	d	file:
H3	mrshs512.c	22;"	d	file:
H3	mrshs512.c	40;"	d	file:
H4	mrshs.c	28;"	d	file:
H4	mrshs256.c	17;"	d	file:
H4	mrshs512.c	23;"	d	file:
H4	mrshs512.c	41;"	d	file:
H5	mrshs256.c	18;"	d	file:
H5	mrshs512.c	24;"	d	file:
H5	mrshs512.c	42;"	d	file:
H6	mrshs256.c	19;"	d	file:
H6	mrshs512.c	25;"	d	file:
H6	mrshs512.c	43;"	d	file:
H7	mrshs256.c	20;"	d	file:
H7	mrshs512.c	26;"	d	file:
H7	mrshs512.c	44;"	d	file:
H8	mrshs512.c	28;"	d	file:
H8	mrshs512.c	46;"	d	file:
H9	mrshs512.c	29;"	d	file:
H9	mrshs512.c	47;"	d	file:
HA	mrshs512.c	30;"	d	file:
HA	mrshs512.c	48;"	d	file:
HB	mrshs512.c	31;"	d	file:
HB	mrshs512.c	49;"	d	file:
HC	mrshs512.c	32;"	d	file:
HC	mrshs512.c	50;"	d	file:
HD	mrshs512.c	33;"	d	file:
HD	mrshs512.c	51;"	d	file:
HE	mrshs512.c	34;"	d	file:
HE	mrshs512.c	52;"	d	file:
HF	mrshs512.c	35;"	d	file:
HF	mrshs512.c	53;"	d	file:
HOMEDIR	makefile	/^HOMEDIR = $(CMM2003DIR)\/unionAlgorithm\/$/;"	m
INCDIR	makefile	/^INCDIR = $(HOMEDIR)\/include\/$/;"	m
INCL	makefile	/^INCL = -I $(INCDIR) -I $(CMM2003INCDIR) -I $(CMM2003OPENDIR)\/include$/;"	m
INLINE_ASM	miracl.h	1374;"	d
INLINE_ASM	miracl.h	1380;"	d
INLINE_ASM	miracl.h	1382;"	d
INLINE_ASM	miracl.h	1399;"	d
INLINE_ASM	miracl.h	1405;"	d
INLINE_ASM	miracl.h	1416;"	d
INPLEN	miracl.h	/^int  INPLEN;       \/* input length               *\/$/;"	m
IOBASE	miracl.h	/^int  IOBASE;       \/* base for input and output *\/$/;"	m
IOBSIZ	miracl.h	/^int  IOBSIZ;       \/* size of i\/o buffer *\/$/;"	m
IOBUFF	miracl.h	/^char *IOBUFF;       \/* i\/o buffer    *\/$/;"	m
IOBUFF	miracl.h	/^char IOBUFF[MR_DEFAULT_BUFFER_SIZE];    \/* i\/o buffer    *\/$/;"	m
InCo	mraes.c	/^static const MR_BYTE InCo[4]={0xB,0xD,0x9,0xE};  \/* Inverse Coefficients *\/$/;"	v	file:
InvMixCol	mraes.c	/^static MR_WORD InvMixCol(MR_WORD x)$/;"	f	file:
K	mrshs256.c	/^static const mr_unsign32 K[64]={$/;"	v	file:
K	mrshs512.c	/^static const mr_unsign64 K[80]=$/;"	v	file:
K0	mrshs.c	30;"	d	file:
K1	mrshs.c	31;"	d	file:
K2	mrshs.c	32;"	d	file:
K3	mrshs.c	33;"	d	file:
KOBLITZ	miracl.h	/^BOOL KOBLITZ;          \/* True for a Koblitz curve *\/$/;"	m
M	miracl.h	/^big *M;$/;"	m
M	miracl.h	/^int M,AA,BB,CC;     \/* for GF(2^m) curves *\/$/;"	m
M	miracl.h	/^mr_utype *M;$/;"	m
M1	miracl.h	194;"	d
M2	miracl.h	195;"	d
M3	miracl.h	196;"	d
M4	miracl.h	197;"	d
M8	miracl.h	201;"	d
MAXBASE	mirdef.h	29;"	d
MINUS	miracl.h	192;"	d
MIRACL	mirdef.h	11;"	d
MIRACL_H	miracl.h	7;"	d
MONTY	miracl.h	/^BOOL MONTY;$/;"	m
MRBITSINCHAR	mirdef.h	30;"	d
MR_ADD	miracl.h	427;"	d
MR_AFFINE	miracl.h	422;"	d
MR_BEST	miracl.h	423;"	d
MR_BIG_RESERVE	miracl.h	87;"	d
MR_BOT	miracl.h	308;"	d
MR_BOT	miracl.h	312;"	d
MR_BTS	miracl.h	290;"	d
MR_BYTE	miracl.h	214;"	d
MR_CBC	miracl.h	375;"	d
MR_CFB1	miracl.h	376;"	d
MR_CFB2	miracl.h	377;"	d
MR_CFB4	miracl.h	378;"	d
MR_DEFAULT_BUFFER_SIZE	miracl.h	22;"	d
MR_DEFAULT_BUFFER_SIZE	miracl.h	24;"	d
MR_DIV	miracl.h	233;"	d
MR_DIV	miracl.h	256;"	d
MR_DOUBLE	miracl.h	428;"	d
MR_EBITS	miracl.h	288;"	d
MR_ECB	miracl.h	374;"	d
MR_ECC_STORE_2M	miracl.h	449;"	d
MR_ECC_STORE_2M	miracl.h	453;"	d
MR_ECC_STORE_N	miracl.h	448;"	d
MR_ECC_STORE_N	miracl.h	452;"	d
MR_ECC_STORE_N2	miracl.h	450;"	d
MR_ECC_STORE_N2	miracl.h	454;"	d
MR_ECP_RESERVE	miracl.h	94;"	d
MR_ECP_RESERVE_A	miracl.h	83;"	d
MR_EPOINT_GENERAL	miracl.h	416;"	d
MR_EPOINT_INFINITY	miracl.h	418;"	d
MR_EPOINT_NORMALIZED	miracl.h	417;"	d
MR_ERR_BAD_BASE	miracl.h	152;"	d
MR_ERR_BAD_FORMAT	miracl.h	151;"	d
MR_ERR_BAD_MODULUS	miracl.h	165;"	d
MR_ERR_BAD_PARAMETERS	miracl.h	153;"	d
MR_ERR_BAD_ROOT	miracl.h	157;"	d
MR_ERR_BASE_TOO_BIG	miracl.h	147;"	d
MR_ERR_COMPOSITE_MODULUS	miracl.h	174;"	d
MR_ERR_DIV_BY_ZERO	miracl.h	148;"	d
MR_ERR_DOUBLE_FAIL	miracl.h	162;"	d
MR_ERR_EXP_TOO_BIG	miracl.h	167;"	d
MR_ERR_FLASH_OVERFLOW	miracl.h	159;"	d
MR_ERR_INT_OP	miracl.h	158;"	d
MR_ERR_IO_OVERFLOW	miracl.h	163;"	d
MR_ERR_NEG_LOG	miracl.h	161;"	d
MR_ERR_NEG_POWER	miracl.h	156;"	d
MR_ERR_NEG_RESULT	miracl.h	150;"	d
MR_ERR_NEG_ROOT	miracl.h	155;"	d
MR_ERR_NOT_BINARY	miracl.h	172;"	d
MR_ERR_NOT_DOUBLE_LEN	miracl.h	169;"	d
MR_ERR_NOT_IRREDUC	miracl.h	170;"	d
MR_ERR_NOT_SUPPORTED	miracl.h	168;"	d
MR_ERR_NO_BASIS	miracl.h	173;"	d
MR_ERR_NO_MIRSYS	miracl.h	164;"	d
MR_ERR_NO_MODULUS	miracl.h	166;"	d
MR_ERR_NO_ROUNDING	miracl.h	171;"	d
MR_ERR_OUT_OF_MEMORY	miracl.h	154;"	d
MR_ERR_OVERFLOW	miracl.h	149;"	d
MR_ERR_TOO_BIG	miracl.h	160;"	d
MR_ESIZE	miracl.h	90;"	d
MR_ESIZE	miracl.h	92;"	d
MR_ESIZE_A	miracl.h	82;"	d
MR_FLASH	mirdef.h	21;"	d
MR_GENERIC_AND_STATIC	miracl.h	742;"	d
MR_HASH_BYTES	miracl.h	295;"	d
MR_IBITS	mirdef.h	19;"	d
MR_IMPASM	mrfast.c	215;"	d	file:
MR_IMPASM	mrfast.c	256;"	d	file:
MR_IMPASM	mrfast.c	362;"	d	file:
MR_IMPASM	mrfast.c	401;"	d	file:
MR_IMPASM	mrscrt.c	127;"	d	file:
MR_IMPASM	mrscrt.c	165;"	d	file:
MR_IN	miracl.h	768;"	d
MR_IN	miracl.h	771;"	d
MR_ITANIUM	miracl.h	129;"	d
MR_KARATSUBA	miracl.h	30;"	d
MR_LBITS	mirdef.h	20;"	d
MR_LITTLE_ENDIAN	mirdef.h	12;"	d
MR_LMM	miracl.h	1370;"	d
MR_LMM	miracl.h	1394;"	d
MR_LROUND	miracl.h	239;"	d
MR_LROUND	miracl.h	241;"	d
MR_LROUND	miracl.h	258;"	d
MR_MAXDEPTH	miracl.h	203;"	d
MR_MAXPRIME	mrprime.c	14;"	d	file:
MR_MAXPRIME	mrprime.c	16;"	d	file:
MR_MAX_M_T_S	miracl.h	461;"	d
MR_MIP_EXISTS	mrcore.c	102;"	d	file:
MR_MIP_EXISTS	mrcore.c	32;"	d	file:
MR_MSBIT	miracl.h	277;"	d
MR_MSK	miracl.h	291;"	d
MR_MUL2_GLS_RESERVE	mrecn2.c	1313;"	d	file:
MR_MUL2_GLS_RESERVE	mrecn2.c	2679;"	d	file:
MR_MUL2_JSF_RESERVE	mrecn2.c	1079;"	d	file:
MR_MUL2_JSF_RESERVE	mrecn2.c	2434;"	d	file:
MR_MUL2_RESERVE	mrecn2.c	1437;"	d	file:
MR_MUL2_RESERVE	mrecn2.c	1439;"	d	file:
MR_MUL2_RESERVE	mrecn2.c	2807;"	d	file:
MR_MUL2_RESERVE	mrecn2.c	2809;"	d	file:
MR_MUL4_GLS_V_RESERVE	mrecn2.c	1366;"	d	file:
MR_MUL4_GLS_V_RESERVE	mrecn2.c	2734;"	d	file:
MR_MUL_RESERVE	mrecn2.c	1001;"	d	file:
MR_MUL_RESERVE	mrecn2.c	1003;"	d	file:
MR_MUL_RESERVE	mrecn2.c	2354;"	d	file:
MR_MUL_RESERVE	mrecn2.c	2356;"	d	file:
MR_NOASM	mirdef.h	31;"	d
MR_NOTSET	miracl.h	420;"	d
MR_NO_STANDARD_IO	mirdef.h	32;"	d
MR_OBITS	miracl.h	279;"	d
MR_OFB1	miracl.h	382;"	d
MR_OFB16	miracl.h	386;"	d
MR_OFB2	miracl.h	383;"	d
MR_OFB4	miracl.h	384;"	d
MR_OFB8	miracl.h	385;"	d
MR_OS_THREADS	miracl.h	719;"	d
MR_OS_THREADS	miracl.h	723;"	d
MR_OS_THREADS	miracl.h	727;"	d
MR_OUT	miracl.h	767;"	d
MR_OUT	miracl.h	770;"	d
MR_OVER	miracl.h	426;"	d
MR_PCFB1	miracl.h	379;"	d
MR_PCFB2	miracl.h	380;"	d
MR_PCFB4	miracl.h	381;"	d
MR_PRE_2	mrecn2.c	2303;"	d	file:
MR_PRE_2	mrecn2.c	785;"	d	file:
MR_PROJECTIVE	miracl.h	421;"	d
MR_QUADRATIC	miracl.h	432;"	d
MR_QUARTIC_D	miracl.h	434;"	d
MR_QUARTIC_M	miracl.h	433;"	d
MR_REMAIN	miracl.h	244;"	d
MR_REMAIN	miracl.h	257;"	d
MR_ROUNDUP	miracl.h	77;"	d
MR_SEXTIC_D	miracl.h	436;"	d
MR_SEXTIC_M	miracl.h	435;"	d
MR_SIZE	miracl.h	86;"	d
MR_SL	miracl.h	79;"	d
MR_SPACES	miracl.h	37;"	d
MR_SPACES	miracl.h	39;"	d
MR_SPACES	miracl.h	43;"	d
MR_SPACES	miracl.h	45;"	d
MR_SPACES	miracl.h	53;"	d
MR_SPACES	miracl.h	55;"	d
MR_SPACES	miracl.h	59;"	d
MR_SPACES	miracl.h	61;"	d
MR_SSE2_64	mrgf2m.c	58;"	d	file:
MR_SSE2_INTRINSICS	mrgf2m.c	40;"	d	file:
MR_SSE2_INTRINSICS	mrgf2m.c	47;"	d	file:
MR_TOBYTE	miracl.h	218;"	d
MR_TOBYTE	miracl.h	220;"	d
MR_TOBYTE	miracl.h	223;"	d
MR_TOOBIG	miracl.h	282;"	d
MR_TOOBIG	miracl.h	284;"	d
MR_TOP	miracl.h	309;"	d
MR_TOP	miracl.h	313;"	d
MR_TWIST	miracl.h	424;"	d
MR_WIN64	miracl.h	137;"	d
MR_WORD	mraes.c	19;"	d	file:
MR_WORD	mrgcm.c	27;"	d	file:
Maj	mrshs256.c	41;"	d	file:
Maj	mrshs512.c	112;"	d	file:
NB	mraes.c	22;"	d	file:
NB	mrgcm.c	26;"	d	file:
NJ	miracl.h	300;"	d
NK	miracl.h	299;"	d
NO_CARRY	miracl.h	/^BOOL NO_CARRY;$/;"	m
NO_EXTENDED	mrarth1.c	41;"	d	file:
NP	miracl.h	/^int NP;$/;"	m
NTRY	miracl.h	/^int  NTRY;         \/* no. of tries for probablistic primality testing   *\/$/;"	m
NV	miracl.h	301;"	d
Nk	miracl.h	/^int Nk,Nr;$/;"	m
Nr	miracl.h	/^int Nk,Nr;$/;"	m
OBJDIR	makefile	/^OBJDIR = $(CMM2003LIBDIR)$/;"	m
OFF	miracl.h	189;"	d
ON	miracl.h	190;"	d
PAD	mrshs.c	35;"	d	file:
PAD	mrshs256.c	32;"	d	file:
PAD	mrshs512.c	103;"	d	file:
PLUS	miracl.h	191;"	d
PRIMES	miracl.h	/^const int *PRIMES;                      \/* small primes array         *\/$/;"	m
PRIMES	miracl.h	/^int *PRIMES;        \/* small primes array         *\/$/;"	m
PrintBig	sm2.c	/^void PrintBig(big data) $/;"	f
PrintBuf	sm2.c	/^void PrintBuf(unsigned char *buf, int	buflen) $/;"	f
R	mrshs256.c	38;"	d	file:
R	mrshs512.c	109;"	d	file:
RD	miracl.h	/^int RS,RD;$/;"	m
ROTL	mraes.c	26;"	d	file:
ROTL16	mraes.c	31;"	d	file:
ROTL24	mraes.c	32;"	d	file:
ROTL8	mraes.c	30;"	d	file:
RPOINT	miracl.h	/^BOOL RPOINT;       \/* =ON for radix point, =OFF for fractions in output *\/$/;"	m
RS	miracl.h	/^int RS,RD;$/;"	m
S	mrshs.c	40;"	d	file:
S	mrshs256.c	37;"	d	file:
S	mrshs512.c	108;"	d	file:
SECBIT	miracl.h	199;"	d
SEED_CONST	sm2.c	105;"	d	file:
SLP1	makefile	/^SLP1 = "$*.o"	"$@ $*.o $*.a"	$@$/;"	m
SM2_DEBUG	sm2.c	10;"	d	file:
SM2_PAD_ZERO	sm2.c	7;"	d	file:
SQR_FASTER_THRESHOLD	mrarth2.c	21;"	d	file:
SS	miracl.h	/^BOOL SS;               \/* True for Super-Singular  *\/$/;"	m
Sig0	mrshs256.c	42;"	d	file:
Sig0	mrshs512.c	113;"	d	file:
Sig1	mrshs256.c	43;"	d	file:
Sig1	mrshs512.c	114;"	d	file:
SubByte	mraes.c	/^static MR_WORD SubByte(MR_WORD a)$/;"	f	file:
THDBIT	miracl.h	200;"	d
TOPBIT	miracl.h	198;"	d
TRACER	miracl.h	/^BOOL TRACER;       \/* turns trace tracker on\/off *\/$/;"	m
TRUE	miracl.h	183;"	d
TWIST	miracl.h	/^int TWIST; \/* set to twisted curve *\/$/;"	m
UNWOUNDM	mrgf2m.c	396;"	d	file:
UNWOUNDM	mrgf2m.c	404;"	d	file:
UNWOUNDM	mrgf2m.c	416;"	d	file:
UNWOUNDM	mrgf2m.c	436;"	d	file:
UNWOUNDS	mrgf2m.c	632;"	d	file:
UNWOUNDS	mrgf2m.c	638;"	d	file:
UNWOUNDS	mrgf2m.c	644;"	d	file:
V	miracl.h	/^big *V;$/;"	m
V	miracl.h	/^mr_utype *V;$/;"	m
VPATH	makefile	/^VPATH	= $(OBJDIR)$/;"	m
X	miracl.h	/^big X;$/;"	m
Y	miracl.h	/^big Y;$/;"	m
Z	miracl.h	/^big Z;$/;"	m
ZERO	mrshs.c	36;"	d	file:
ZERO	mrshs256.c	33;"	d	file:
ZERO	mrshs512.c	104;"	d	file:
ZZNS	miracl.h	120;"	d
_MIPDO_	miracl.h	748;"	d
_MIPDO_	miracl.h	757;"	d
_MIPD_	miracl.h	747;"	d
_MIPD_	miracl.h	756;"	d
_MIPPO_	miracl.h	750;"	d
_MIPPO_	miracl.h	759;"	d
_MIPP_	miracl.h	749;"	d
_MIPP_	miracl.h	758;"	d
_MIPTO_	miracl.h	746;"	d
_MIPTO_	miracl.h	755;"	d
_MIPT_	miracl.h	745;"	d
_MIPT_	miracl.h	754;"	d
__SM2_HEADER_2011_01_28__	sm2.h	2;"	d
a	miracl.h	/^	zzn2 a;$/;"	m
a	miracl.h	/^    big a,b,n;$/;"	m
a	miracl.h	/^    big a;$/;"	m
a	miracl.h	/^    int m,a,b,c;$/;"	m
a	miracl.h	/^aes a;$/;"	m
a	miracl.h	/^int a,b,c,d,r,q,oldn,ndig;$/;"	m
a	sm2.c	/^char *a;$/;"	m	struct:FPECC	file:
a2	miracl.h	/^    big a6,a2;$/;"	m
a6	miracl.h	/^    big a6,a2;$/;"	m
absol	mrcore.c	/^void absol(flash x,flash y)$/;"	f
active	miracl.h	/^BOOL  active;$/;"	m
add	mrarth0.c	/^void add(_MIPD_ big x,big y,big z)$/;"	f
add2	mrgf2m.c	/^void add2(big x,big y,big z)$/;"	f
aes	miracl.h	/^} aes;$/;"	t
aes_decrypt	mraes.c	/^mr_unsign32 aes_decrypt(aes *a,char *buff)$/;"	f
aes_ecb_decrypt	mraes.c	/^void aes_ecb_decrypt(aes *a,MR_BYTE *buff)$/;"	f
aes_ecb_encrypt	mraes.c	/^void aes_ecb_encrypt(aes *a,MR_BYTE *buff)$/;"	f
aes_encrypt	mraes.c	/^mr_unsign32 aes_encrypt(aes* a,char *buff)$/;"	f
aes_end	mraes.c	/^void aes_end(aes *a)$/;"	f
aes_getreg	mraes.c	/^void aes_getreg(aes *a,char *ir)$/;"	f
aes_init	mraes.c	/^BOOL aes_init(aes* a,int mode,int nk,char *key,char *iv)$/;"	f
aes_reset	mraes.c	/^void aes_reset(aes *a,int mode,char *iv)$/;"	f
apbase	miracl.h	/^mr_small apbase;     \/* apparent base   *\/$/;"	m
b	miracl.h	/^	zzn2 b;$/;"	m
b	miracl.h	/^    big a,b,n;$/;"	m
b	miracl.h	/^    big b;$/;"	m
b	miracl.h	/^    int m,a,b,c;$/;"	m
b	miracl.h	/^int a,b,c,d,r,q,oldn,ndig;$/;"	m
b	sm2.c	/^char *b;$/;"	m	struct:FPECC	file:
base	miracl.h	/^mr_small base;       \/* number base     *\/$/;"	m
base2	miracl.h	/^mr_small base2;      \/* 2^mr_lg2b          *\/$/;"	m
base_mask	miracl.h	/^mr_small base_mask;$/;"	m
big	miracl.h	/^typedef struct bigtype *big;$/;"	t
big_chinese	miracl.h	/^} big_chinese;$/;"	t
big_ndash	miracl.h	/^big big_ndash;$/;"	m
big_to_bytes	mrarth1.c	/^int big_to_bytes(_MIPD_ int max,big x,char *ptr,BOOL justify)$/;"	f
bigbits	mrbits.c	/^void bigbits(_MIPD_ int n,big x)$/;"	f
bigdig	mrrand.c	/^void bigdig(_MIPD_ int n,int b,big x)$/;"	f
bigrand	mrrand.c	/^void bigrand(_MIPD_ big w,big x)$/;"	f
bigtype	miracl.h	/^struct bigtype$/;"	s
bmul	mraes.c	/^static MR_BYTE bmul(MR_BYTE x,MR_BYTE y)$/;"	f	file:
borrow	miracl.h	/^mr_unsign32 borrow;$/;"	m
brand	mrcore.c	/^mr_small brand(_MIPDO_ )$/;"	f
brick	miracl.h	/^} brick;$/;"	t
brick_end	mrbrick.c	/^void brick_end(brick *b)$/;"	f
brick_init	mrbrick.c	/^BOOL brick_init(_MIPD_ brick *b,big g,big n,int window,int nb)$/;"	f
brick_init	mrbrick.c	/^void brick_init(brick *b,const mr_small *table,big n,int window,int nb)$/;"	f
bytes_to_big	mrarth1.c	/^void bytes_to_big(_MIPD_ int len,const char *ptr,big x)$/;"	f
c	miracl.h	/^	zzn2 c;$/;"	m
c	miracl.h	/^    big c;$/;"	m
c	miracl.h	/^    int m,a,b,c;$/;"	m
c	miracl.h	/^int a,b,c,d,r,q,oldn,ndig;$/;"	m
carryon	miracl.h	/^BOOL last,carryon;$/;"	m
cbase	mrio2.c	/^static void cbase(_MIPD_ big x,mr_small oldbase,big y)$/;"	f	file:
check	miracl.h	/^BOOL  check;         \/* overflow check  *\/$/;"	m
chin	miracl.h	/^small_chinese chin;$/;"	m
cinnum	mrio2.c	/^int cinnum(_MIPD_ flash x,FILE *filep)$/;"	f
cinstr	mrio2.c	/^int cinstr(_MIPD_ flash x,char *string)$/;"	f
cnr	miracl.h	/^int cnr;    \/* a cubic non-residue *\/$/;"	m
compare	miracl.h	69;"	d
const1	miracl.h	/^mr_utype const1,const2,const3;$/;"	m
const2	miracl.h	/^mr_utype const1,const2,const3;$/;"	m
const3	miracl.h	/^mr_utype const1,const2,const3;$/;"	m
convert	mrcore.c	/^void convert(_MIPD_ int n ,big x)$/;"	f
coord	miracl.h	/^int coord;$/;"	m
copy	mrcore.c	/^void copy(flash x,flash y)$/;"	f
cotnum	mrio2.c	/^int cotnum(_MIPD_ flash x,FILE *filep)$/;"	f
cotstr	mrio2.c	/^int cotstr(_MIPD_ flash x,char *string)$/;"	f
counter	miracl.h	/^mr_unsign32 counter;$/;"	m
cr	miracl.h	/^mr_utype *prime,*cr;$/;"	m
crt	mrcrt.c	/^void crt(_MIPD_ big_chinese *c,big *u,big x)$/;"	f
crt_end	mrcrt.c	/^void crt_end(big_chinese *c)$/;"	f
crt_init	mrcrt.c	/^BOOL crt_init(_MIPD_ big_chinese *c,int r,big *moduli)$/;"	f
csprng	miracl.h	/^} csprng;$/;"	t
d	miracl.h	/^    mr_large d;$/;"	m	union:doubleword
d	miracl.h	/^int a,b,c,d,r,q,oldn,ndig;$/;"	m
db	miracl.h	/^double db,n,p;$/;"	m
debug	miracl.h	/^BOOL debug;$/;"	m
decr	mrarth0.c	/^void decr(_MIPD_ big x,int n,big z)$/;"	f
degree	miracl.h	/^int nprimes,degree;$/;"	m
degree2	mrgf2m.c	/^int degree2(big x)$/;"	f
denom	mrcore.c	/^void denom(_MIPD_ flash x,big y)$/;"	f
deps	makefile	/^deps =  $(patsubst %.o,%.d,$(objs))$/;"	m
depth	miracl.h	/^int   depth;                 \/* error tracing ..*\/$/;"	m
derand	sm2.c	/^int derand(unsigned char *r, int rlen)$/;"	f
divide	mrarth2.c	/^void divide(_MIPD_ big x,big y,big z)$/;"	f
divisible	mrarth2.c	/^BOOL divisible(_MIPD_ big x,big y)$/;"	f
dlconv	mrcore.c	/^void dlconv(_MIPD_ mr_dltype n,big x)$/;"	f
double_inverse	mrxgcd.c	/^BOOL double_inverse(_MIPD_ big n,big x,big y,big w,big z)$/;"	f
doubleword	miracl.h	/^union doubleword$/;"	u
ebrick	miracl.h	/^} ebrick;$/;"	t
ebrick2	miracl.h	/^} ebrick2;$/;"	t
ebrick2_end	mrec2m.c	/^void ebrick2_end(ebrick2 *B)$/;"	f
ebrick2_init	mrec2m.c	/^BOOL ebrick2_init(_MIPD_ ebrick2 *B,big x,big y,big a2,big a6,int m,int a,int b,int c,int window,int nb)$/;"	f
ebrick2_init	mrec2m.c	/^void ebrick2_init(ebrick2 *B,const mr_small* rom,big a2,big a6,int m,int a,int b,int c,int window,int nb)$/;"	f
ebrick_end	mrebrick.c	/^void ebrick_end(ebrick *B)$/;"	f
ebrick_init	mrebrick.c	/^BOOL ebrick_init(_MIPD_ ebrick *B,big x,big y,big a,big b,big n,int window,int nb)$/;"	f
ebrick_init	mrebrick.c	/^void ebrick_init(ebrick *B,const mr_small* rom,big a,big b,big n,int window,int nb)$/;"	f
ecn2	miracl.h	/^} ecn2;$/;"	t
ecn2_add	mrecn2.c	/^BOOL ecn2_add(_MIPD_ ecn2 *Q,ecn2 *P)$/;"	f
ecn2_add1	mrecn2.c	/^BOOL ecn2_add1(_MIPD_ ecn2 *Q,ecn2 *P,zzn2 *lam)$/;"	f
ecn2_add2	mrecn2.c	/^BOOL ecn2_add2(_MIPD_ ecn2 *Q,ecn2 *P,zzn2 *lam,zzn2 *ex1)$/;"	f
ecn2_add3	mrecn2.c	/^BOOL ecn2_add3(_MIPD_ ecn2 *Q,ecn2 *P,zzn2 *lam,zzn2 *ex1,zzn2 *ex2)$/;"	f
ecn2_add_sub	mrecn2.c	/^BOOL ecn2_add_sub(_MIPD_ ecn2 *P,ecn2 *Q,ecn2 *PP,ecn2 *PM)$/;"	f
ecn2_brick_end	mrecn2.c	/^void ecn2_brick_end(ebrick *B)$/;"	f
ecn2_brick_init	mrecn2.c	/^BOOL ecn2_brick_init(_MIPD_ ebrick *B,zzn2 *x,zzn2 *y,big a,big b,big n,int window,int nb)$/;"	f
ecn2_brick_init	mrecn2.c	/^void ecn2_brick_init(ebrick *B,const mr_small* rom,big a,big b,big n,int window,int nb)$/;"	f
ecn2_compare	mrecn2.c	/^BOOL ecn2_compare(_MIPD_ ecn2 *a,ecn2 *b)$/;"	f
ecn2_copy	mrecn2.c	/^void ecn2_copy(ecn2 *a,ecn2 *b)$/;"	f
ecn2_get	mrecn2.c	/^void ecn2_get(_MIPD_ ecn2 *e,zzn2 *x,zzn2 *y,zzn2 *z)$/;"	f
ecn2_getx	mrecn2.c	/^void ecn2_getx(ecn2 *e,zzn2 *x)$/;"	f
ecn2_getxy	mrecn2.c	/^void ecn2_getxy(ecn2 *e,zzn2 *x,zzn2 *y)$/;"	f
ecn2_getz	mrecn2.c	/^void ecn2_getz(_MIPD_ ecn2 *e,zzn2 *z)$/;"	f
ecn2_iszero	mrecn2.c	/^BOOL ecn2_iszero(ecn2 *a)$/;"	f
ecn2_mul	mrecn2.c	/^int ecn2_mul(_MIPD_ big k,ecn2 *P)$/;"	f
ecn2_mul2	mrecn2.c	/^int ecn2_mul2(_MIPD_ big a,int ns,ecn2 *FT,big b,ecn2 *Q,ecn2 *R)$/;"	f
ecn2_mul2_gls	mrecn2.c	/^int ecn2_mul2_gls(_MIPD_ big *a,ecn2 *P,zzn2 *psi,ecn2 *R)$/;"	f
ecn2_mul2_jsf	mrecn2.c	/^int ecn2_mul2_jsf(_MIPD_ big a,ecn2 *P,big b,ecn2 *Q,ecn2 *R)$/;"	f
ecn2_mul4_gls_v	mrecn2.c	/^int ecn2_mul4_gls_v(_MIPD_ big *a,int ns,ecn2 *FT,big *b,ecn2 *Q,zzn2 *psi,ecn2 *R)$/;"	f
ecn2_mul_brick_gls	mrecn2.c	/^void ecn2_mul_brick_gls(_MIPD_ ebrick *B,big *e,zzn2 *psi,zzn2 *x,zzn2 *y)$/;"	f
ecn2_muln_engine	mrecn2.c	/^int ecn2_muln_engine(_MIPD_ int wa,int sza,int wb,int szb,big *ma,big *ma3,big *mb,big *mb3,ecn2 *Ta,ecn2 *Tb,ecn2 *R)$/;"	f
ecn2_multi_norm	mrecn2.c	/^BOOL ecn2_multi_norm(_MIPD_ int m,zzn2 *work,ecn2 *p)$/;"	f
ecn2_multn	mrecn2.c	/^void ecn2_multn(_MIPD_ int n,big *e,ecn2 *P,ecn2 *R)$/;"	f
ecn2_negate	mrecn2.c	/^void ecn2_negate(_MIPD_ ecn2 *u,ecn2 *w)$/;"	f
ecn2_norm	mrecn2.c	/^void ecn2_norm(_MIPD_ ecn2 *a)$/;"	f
ecn2_pre	mrecn2.c	/^static void ecn2_pre(_MIPD_ int sz,BOOL norm,ecn2 *PT)$/;"	f	file:
ecn2_precomp	mrecn2.c	/^void ecn2_precomp(_MIPD_ int sz,BOOL norm,ecn2 *P,ecn2 *T)$/;"	f
ecn2_precomp_gls	mrecn2.c	/^void ecn2_precomp_gls(_MIPD_ int sz,BOOL norm,ecn2 *P,zzn2 *psi,ecn2 *T)$/;"	f
ecn2_psi	mrecn2.c	/^void ecn2_psi(_MIPD_ zzn2 *psi,ecn2 *P)$/;"	f
ecn2_rhs	mrecn2.c	/^void ecn2_rhs(_MIPD_ zzn2 *x,zzn2 *rhs)$/;"	f
ecn2_set	mrecn2.c	/^BOOL ecn2_set(_MIPD_ zzn2 *x,zzn2 *y,ecn2 *e)$/;"	f
ecn2_setx	mrecn2.c	/^BOOL ecn2_setx(_MIPD_ zzn2 *x,ecn2 *e)$/;"	f
ecn2_setxyz	mrecn2.c	/^void ecn2_setxyz(_MIPD_ zzn2 *x,zzn2 *y,zzn2 *z,ecn2 *e)$/;"	f
ecn2_setxyz	mrecn2.c	/^void ecn2_setxyz(zzn2 *x,zzn2 *y,zzn2 *z,ecn2 *e)$/;"	f
ecn2_sub	mrecn2.c	/^BOOL ecn2_sub(_MIPD_ ecn2 *Q,ecn2 *P)$/;"	f
ecn2_zero	mrecn2.c	/^void ecn2_zero(ecn2 *a)$/;"	f
ecp_memalloc	mrcore.c	/^void *ecp_memalloc(_MIPD_ int num)$/;"	f
ecp_memkill	mrcore.c	/^void ecp_memkill(_MIPD_ char *mem,int num)$/;"	f
ecurve2_add	mrec2m.c	/^big ecurve2_add(_MIPD_ epoint *p,epoint *pa)$/;"	f
ecurve2_double	mrec2m.c	/^void ecurve2_double(_MIPD_ epoint *p)$/;"	f
ecurve2_init	mrec2m.c	/^BOOL ecurve2_init(_MIPD_ int m,int a,int b,int c,big a2,big a6,BOOL check,int type)$/;"	f
ecurve2_mult	mrec2m.c	/^void ecurve2_mult(_MIPD_ big e,epoint *pa,epoint *pt)$/;"	f
ecurve2_mult2	mrec2m.c	/^void ecurve2_mult2(_MIPD_ big e,epoint *p,big ea,epoint *pa,epoint *pt)$/;"	f
ecurve2_multi_add	mrec2m.c	/^void ecurve2_multi_add(_MIPD_ int m,epoint **x,epoint **w)$/;"	f
ecurve2_multn	mrec2m.c	/^void ecurve2_multn(_MIPD_ int n,big *y,epoint **x,epoint *w)$/;"	f
ecurve2_padd	mrec2m.c	/^static BOOL ecurve2_padd(_MIPD_ epoint *p,epoint *pa)$/;"	f	file:
ecurve2_sub	mrec2m.c	/^big ecurve2_sub(_MIPD_ epoint *p,epoint *pa)$/;"	f
ecurve_add	mrcurve.c	/^int ecurve_add(_MIPD_ epoint *p,epoint *pa)$/;"	f
ecurve_add_sub	mrcurve.c	/^static BOOL ecurve_add_sub(_MIPD_ epoint *P,epoint *Q,epoint *PP,epoint *PM)$/;"	f	file:
ecurve_double	mrcurve.c	/^void ecurve_double(_MIPD_ epoint *p)$/;"	f
ecurve_double_add	mrcurve.c	/^void ecurve_double_add(_MIPD_ epoint *a,epoint*b,epoint *c,epoint *d,big *s1,big *s2)$/;"	f
ecurve_init	mrmonty.c	/^void ecurve_init(_MIPD_ big a,big b,big p,int type)$/;"	f
ecurve_mult	mrcurve.c	/^int ecurve_mult(_MIPD_ big e,epoint *pa,epoint *pt)$/;"	f
ecurve_mult2	mrcurve.c	/^void ecurve_mult2(_MIPD_ big e,epoint *p,big ea,epoint *pa,epoint *pt)$/;"	f
ecurve_multi_add	mrcurve.c	/^void ecurve_multi_add(_MIPD_ int m,epoint **x,epoint**w)$/;"	f
ecurve_multn	mrcurve.c	/^void ecurve_multn(_MIPD_ int n,big *y,epoint **x,epoint *w)$/;"	f
ecurve_padd	mrcurve.c	/^static BOOL ecurve_padd(_MIPD_ epoint *p,epoint *pa)$/;"	f	file:
ecurve_sub	mrcurve.c	/^int ecurve_sub(_MIPD_ epoint *p,epoint *pa)$/;"	f
egcd	mrgcd.c	/^int egcd(_MIPD_ big x,big y,big z)$/;"	f
enkey	sm2.c	/^unsigned char enkey[32] = {$/;"	v
enrand	sm2.c	/^int enrand(unsigned char *r, int rlen)$/;"	f
epoint	miracl.h	/^} epoint;$/;"	t
epoint2_comp	mrec2m.c	/^BOOL epoint2_comp(_MIPD_ epoint *a,epoint *b)$/;"	f
epoint2_copy	mrec2m.c	/^void epoint2_copy(epoint *a,epoint *b)$/;"	f
epoint2_get	mrec2m.c	/^int epoint2_get(_MIPD_ epoint* p,big x,big y)$/;"	f
epoint2_getxyz	mrec2m.c	/^void epoint2_getxyz(_MIPD_ epoint* p,big x,big y,big z)$/;"	f
epoint2_multi_norm	mrec2m.c	/^BOOL epoint2_multi_norm(_MIPD_ int m,big *work,epoint **p)$/;"	f
epoint2_negate	mrec2m.c	/^void epoint2_negate(_MIPD_ epoint *p)$/;"	f
epoint2_norm	mrec2m.c	/^BOOL epoint2_norm(_MIPD_ epoint *p)$/;"	f
epoint2_set	mrec2m.c	/^BOOL epoint2_set(_MIPD_ big x,big y,int cb,epoint *p)$/;"	f
epoint_comp	mrcurve.c	/^BOOL epoint_comp(_MIPD_ epoint *a,epoint *b)$/;"	f
epoint_copy	mrcurve.c	/^void epoint_copy(epoint *a,epoint *b)$/;"	f
epoint_free	mrcore.c	/^void epoint_free(epoint *p)$/;"	f
epoint_get	mrcurve.c	/^int epoint_get(_MIPD_ epoint* p,big x,big y)$/;"	f
epoint_getrhs	mrcurve.c	/^static void epoint_getrhs(_MIPD_ big x,big y)$/;"	f	file:
epoint_getxyz	mrcurve.c	/^void epoint_getxyz(_MIPD_ epoint *p,big x,big y,big z)$/;"	f
epoint_init	mrcore.c	/^epoint* epoint_init(_MIPDO_ )$/;"	f
epoint_init_mem	mrcore.c	/^epoint* epoint_init_mem(_MIPD_ char *mem,int index)$/;"	f
epoint_init_mem_variable	mrcore.c	/^epoint* epoint_init_mem_variable(_MIPD_ char *mem,int index,int sz)$/;"	f
epoint_multi_norm	mrcurve.c	/^BOOL epoint_multi_norm(_MIPD_ int m,big *work,epoint **p)$/;"	f
epoint_negate	mrcurve.c	/^void epoint_negate(_MIPD_ epoint *p)$/;"	f
epoint_norm	mrcurve.c	/^BOOL epoint_norm(_MIPD_ epoint *p)$/;"	f
epoint_set	mrcurve.c	/^BOOL epoint_set(_MIPD_ big x,big y,int cb,epoint *p)$/;"	f
epoint_x	mrcurve.c	/^BOOL epoint_x(_MIPD_ big x)$/;"	f
expb2	mrbits.c	/^void expb2(_MIPD_ int n,big x)$/;"	f
expint	mrarth3.c	/^void expint(_MIPD_ int b,int n,big x)$/;"	f
exsign	mrcore.c	/^int exsign(flash x)$/;"	f
f	miracl.h	/^char f[16];$/;"	m
fastmultop	mrfast.c	/^BOOL fastmultop(_MIPD_ int n,big x,big y,big z)$/;"	f
fbsub	mraes.c	/^static const MR_BYTE fbsub[]=$/;"	v	file:
fft_mult	mrfast.c	/^void fft_mult(_MIPD_ big x,big y,big z)$/;"	f
fft_reset	mrfast.c	/^void fft_reset(_MIPDO_ )$/;"	f
fill_pool	mrstrong.c	/^static void fill_pool(csprng *rng)$/;"	f	file:
fin	miracl.h	/^BOOL  fin;           \/* Input from file  *\/$/;"	m
first_one	miracl.h	/^BOOL first_one;$/;"	m
fit	mrcore.c	/^BOOL fit(big x,big y,int f)$/;"	f
fkey	miracl.h	/^mr_unsign32 fkey[60];$/;"	m
flash	miracl.h	/^typedef big flash;$/;"	t
forever	miracl.h	178;"	d
fout	miracl.h	/^BOOL  fout;          \/* Output to file   *\/$/;"	m
fpack	mrcore.c	/^void fpack(_MIPD_ big n,big d,flash x)$/;"	f
frobenius	mrec2m.c	/^static void frobenius(_MIPD_ epoint *P)$/;"	f	file:
ftable	mraes.c	/^static const MR_WORD ftable[]=$/;"	v	file:
ftable1	mraes.c	/^static const MR_WORD ftable1[]=$/;"	v	file:
ftable2	mraes.c	/^static const MR_WORD ftable2[]=$/;"	v	file:
ftable3	mraes.c	/^static const MR_WORD ftable3[]=$/;"	v	file:
gcd2	mrgf2m.c	/^void gcd2(_MIPD_ big x,big y,big g)$/;"	f
gcm	miracl.h	/^} gcm;$/;"	t
gcm_add_cipher	mrgcm.c	/^BOOL gcm_add_cipher(gcm *g,int mode,char *plain,int len,char *cipher)$/;"	f
gcm_add_header	mrgcm.c	/^BOOL gcm_add_header(gcm* g,char *header,int len)$/;"	f
gcm_finish	mrgcm.c	/^void gcm_finish(gcm *g,char *tag)$/;"	f
gcm_init	mrgcm.c	/^void gcm_init(gcm* g,int nk,char *key,char *iv)$/;"	f
get_mip	mrcore.c	/^        miracl *get_mip()$/;"	f
get_mip	mrcore.c	/^    miracl *get_mip()$/;"	f
getdig	mrcore.c	/^int getdig(_MIPD_ big x,int i)$/;"	f
gf2m_dotprod	mrgf2m.c	/^void gf2m_dotprod(_MIPD_ int n,big *x,big *y,big w)$/;"	f
gf2mul	mrgcm.c	/^static void gf2mul(gcm *g)$/;"	f	file:
gprime	mrprime.c	/^void gprime(_MIPD_ int maxp)$/;"	f
h	miracl.h	/^    mr_small h[2];$/;"	m	union:doubleword
h	miracl.h	/^mr_unsign32 h[8];$/;"	m
h	miracl.h	/^mr_unsign64 h[8];$/;"	m
halftrace2	mrgf2m.c	/^void halftrace2(_MIPD_ big b,big w)$/;"	f
hamming	mrarth1.c	/^int hamming(_MIPD_ big x)$/;"	f
igcd	mrcore.c	/^unsigned int igcd(unsigned int x,unsigned int y)$/;"	f
imuldiv	mrcore.c	/^mr_small imuldiv(mr_small a,mr_small b,mr_small c,mr_small m,mr_large im,mr_small *rp)$/;"	f
in_range	mrscrt.c	/^static mr_utype in_range(mr_utype x,mr_utype y)$/;"	f	file:
includes	makefile	/^includes = 	.\/sm2.h 	\\$/;"	m
incr	mrarth0.c	/^void incr(_MIPD_ big x,int n,big z)$/;"	f
incr2	mrgf2m.c	/^void incr2(big x,int n,big w)$/;"	f
infile	miracl.h	/^FILE  *infile;       \/* Input file       *\/$/;"	m
init_big_from_rom	mrcore.c	/^BOOL init_big_from_rom(big x,int len,const mr_small *rom,int romsize,int *romptr)$/;"	f
init_it	mrfast.c	/^static BOOL init_it(_MIPD_ int logn)$/;"	f	file:
init_point_from_rom	mrcore.c	/^BOOL init_point_from_rom(epoint *P,int len,const mr_small *rom,int romsize,int *romptr)$/;"	f
innum	mrio1.c	/^int innum(_MIPD_ flash x,FILE *filep)$/;"	f
insign	mrcore.c	/^void insign(int s,flash x)$/;"	f
instr	mrio1.c	/^int instr(_MIPD_ flash x,char *string)$/;"	f
invers	mrsmall.c	/^mr_small invers(mr_small x,mr_small y)$/;"	f
inverse	miracl.h	/^mr_utype *inverse,**roots;$/;"	m
inverse2	mrgf2m.c	/^BOOL inverse2(_MIPD_ big x,big w)$/;"	f
inverse_base	miracl.h	/^mr_large inverse_base;$/;"	m
invmodp	mrxgcd.c	/^int invmodp(_MIPD_ big a,big p,big z)$/;"	f
invmodp	mrxgcd.c	/^int invmodp(_MIPD_ big x,big y,big z)$/;"	f
ira	miracl.h	/^mr_unsign32 ira[NK];  \/* random number...   *\/$/;"	m
irand	mrcore.c	/^void irand(_MIPD_ mr_unsign32 seed)$/;"	f
isprime	mrprime.c	/^BOOL isprime(_MIPD_ big x)$/;"	f
isqrt	mrcore.c	/^unsigned int isqrt(unsigned int num,unsigned int guess)$/;"	f
itnaf	mrec2m.c	/^static int itnaf(int mu,int a,int b,signed char *tm)$/;"	f	file:
jac	mrsmall.c	/^int jac(mr_small x,mr_small n)$/;"	f
jack	mrjack.c	/^int jack(_MIPD_ big a,big n)$/;"	f
karmul2	mrgf2m.c	/^void karmul2(int n,mr_small *t,mr_small *x,mr_small *y,mr_small *z)$/;"	f
karmul2_poly	mrgf2m.c	/^void karmul2_poly(_MIPD_ int n,big *t,big *x,big *y,big *z)$/;"	f
karmul2_poly_upper	mrgf2m.c	/^void karmul2_poly_upper(_MIPD_ int n,big *t,big *x,big *y,big *z)$/;"	f
kdf	sm2.c	/^int kdf(unsigned char *zl, unsigned char *zr, int klen, unsigned char *kbuf)$/;"	f
kdf_key	sm2.c	/^int kdf_key(unsigned char *z, int zlen, int klen, unsigned char *kbuf)$/;"	f
kill_monty	mrmonty.c	/^void kill_monty(_MIPDO_ )$/;"	f
ku	miracl.h	/^mr_small u,v,ku,kv;$/;"	m
kv	miracl.h	/^mr_small u,v,ku,kv;$/;"	m
last	miracl.h	/^BOOL last,carryon;$/;"	m
len	miracl.h	/^    mr_lentype len;$/;"	m	struct:bigtype
lenA	miracl.h	/^mr_unsign32 lenA[2],lenC[2];$/;"	m
lenC	miracl.h	/^mr_unsign32 lenA[2],lenC[2];$/;"	m
length	miracl.h	/^mr_unsign32 length[2];$/;"	m
length	miracl.h	/^mr_unsign64 length[2];$/;"	m
lg2b	miracl.h	/^int   lg2b;          \/* bits in base    *\/$/;"	m
lgcd	mrcore.c	/^unsigned long lgcd(unsigned long x,unsigned long y)$/;"	f
lgconv	mrcore.c	/^void lgconv(_MIPD_ long n,big x)$/;"	f
libs	makefile	/^libs = sm2.a$/;"	m
logN	miracl.h	/^int logN;           \/* constants for fast fourier fft multiplication *\/$/;"	m
logb2	mrbits.c	/^int logb2(_MIPD_ big x)$/;"	f
lsqrt	mrcore.c	/^unsigned long lsqrt(unsigned long num,unsigned long guess)$/;"	f
lsw	miracl.h	/^mr_small msw,lsw;$/;"	m
ltab	mraes.c	/^static const MR_BYTE ltab[]=$/;"	v	file:
lucas	mrlucas.c	/^void lucas(_MIPD_ big p,big r,big n,big vp,big v)$/;"	f
m	miracl.h	/^    int m,a,b,c;$/;"	m
mad	mrarth2.c	/^void mad(_MIPD_ big x,big y,big z,big w,big q,big r)$/;"	f
marker	miracl.h	/^    int marker;$/;"	m
marker	miracl.h	/^int marker;$/;"	m
max	miracl.h	/^    int max;$/;"	m
memalloc	mrcore.c	/^void *memalloc(_MIPD_ int num)$/;"	f
memkill	mrcore.c	/^void memkill(_MIPD_ char *mem,int len)$/;"	f
mip	mrcore.c	/^          miracl mip;$/;"	v
miracl	miracl.h	/^} miracl;$/;"	t
mirexit	mrcore.c	/^void mirexit(_MIPDO_ )$/;"	f
mirkill	mrcore.c	/^void mirkill(big x)$/;"	f
mirsys	mrcore.c	/^miracl *mirsys(miracl *mr_mip,int nd,mr_small nb)$/;"	f
mirsys_basic	mrcore.c	/^miracl *mirsys_basic(miracl *mr_mip,int nd,mr_small nb)$/;"	f
mirvar	mrcore.c	/^flash mirvar(_MIPD_ int iv)$/;"	f
mirvar_mem	mrcore.c	/^flash mirvar_mem(_MIPD_ char *mem,int index)$/;"	f
mirvar_mem_variable	mrcore.c	/^flash mirvar_mem_variable(char *mem,int index,int sz)$/;"	f
mode	miracl.h	/^int mode;$/;"	m
modmult2	mrgf2m.c	/^void modmult2(_MIPD_ big x,big y,big w)$/;"	f
modsquare2	mrgf2m.c	/^void modsquare2(_MIPD_ big x,big w)$/;"	f
modulus	miracl.h	/^big modulus;$/;"	m
modxn_1	mrfast.c	/^static void modxn_1(_MIPD_ int n,int deg,big *x)$/;"	f	file:
mputs	mrcore.c	/^static void mputs(char *s)$/;"	f	file:
mr_abs	miracl.h	180;"	d
mr_addbit	mrcore.c	/^void mr_addbit(_MIPD_ big x,int n)$/;"	f
mr_alloc	mralloc.c	/^void *mr_alloc(_MIPD_ int num,int size)$/;"	f
mr_and	mrcore.c	/^void mr_and(big x,big y,big z)$/;"	f
mr_berror	mrcore.c	/^void mr_berror(_MIPD_ int nerr)$/;"	f
mr_big_reserve	miracl.h	100;"	d
mr_bottom2	mrgf2m.c	/^static void mr_bottom2(mr_small *x,mr_small *y,mr_small *z)$/;"	f	file:
mr_bottom3	mrgf2m.c	/^static void mr_bottom3(mr_small *x,mr_small *y,mr_small *z)$/;"	f	file:
mr_bottom4	mrgf2m.c	/^static void mr_bottom4(mr_small *x,mr_small *y,mr_small *z)$/;"	f	file:
mr_bottom5	mrgf2m.c	/^static void mr_bottom5(mr_small *x,mr_small *y,mr_small *z)$/;"	f	file:
mr_compare	mrcore.c	/^int mr_compare(big x,big y)$/;"	f
mr_dif_fft	mrfast.c	/^void mr_dif_fft(_MIPD_ int logn,int pr,mr_utype *data)$/;"	f
mr_dit_fft	mrfast.c	/^void mr_dit_fft(_MIPD_ int logn,int pr,mr_utype *data)$/;"	f
mr_dltype	mirdef.h	26;"	d
mr_ecp_reserve	miracl.h	110;"	d
mr_ecp_reserve_a	miracl.h	103;"	d
mr_end_threading	mrcore.c	/^    void mr_end_threading()$/;"	f
mr_esize	miracl.h	106;"	d
mr_esize	miracl.h	108;"	d
mr_esize_a	miracl.h	102;"	d
mr_fft_init	mrfast.c	/^int mr_fft_init(_MIPD_ int logn,big m1,big m2,BOOL cr)$/;"	f
mr_first_alloc	mralloc.c	/^miracl *mr_first_alloc()$/;"	f
mr_free	mralloc.c	/^void mr_free(void *addr)$/;"	f
mr_init_threading	mrcore.c	/^    void mr_init_threading()$/;"	f
mr_invert	mrarth1.c	/^mr_large mr_invert(mr_small n)$/;"	f
mr_jsf	mrarth1.c	/^void mr_jsf(_MIPD_ big k0,big k1,big u0p,big u0m,big u1p,big u1m)$/;"	f
mr_key	mrcore.c	/^    DWORD mr_key;   $/;"	v
mr_key	mrcore.c	/^    pthread_key_t mr_key;$/;"	v
mr_large	miracl.h	/^    typedef unsigned mr_dltype mr_large;$/;"	t
mr_large	miracl.h	/^  typedef mr_dltype mr_large;$/;"	t
mr_lent	mrcore.c	/^int mr_lent(flash x)$/;"	f
mr_lentype	miracl.h	/^typedef unsigned int mr_lentype;$/;"	t
mr_lzero	mrcore.c	/^void mr_lzero(big x)$/;"	f
mr_mip	mrcore.c	/^          miracl *mr_mip=&mip;$/;"	v
mr_mip	mrcore.c	/^          miracl *mr_mip=NULL;  \/* MIRACL's one and only global variable *\/$/;"	v
mr_mip	mrcore.c	/^    miracl *mr_mip;$/;"	v
mr_mul2	mrgf2m.c	/^static mr_small mr_mul2(mr_small a,mr_small b,mr_small *r)$/;"	f	file:
mr_naf_window	mrcore.c	/^int mr_naf_window(_MIPD_ big x,big x3,int i,int *nbs,int *nzs,int store)$/;"	f
mr_notint	mrcore.c	/^BOOL mr_notint(flash x)$/;"	f
mr_padd	mrarth0.c	/^void mr_padd(_MIPD_ big x,big y,big z)$/;"	f
mr_pmul	mrarth1.c	/^void mr_pmul(_MIPD_ big x,mr_small sn,big z)$/;"	f
mr_poly_mul	mrfast.c	/^int mr_poly_mul(_MIPD_ int degx,big *x,int degy,big *y,big *z)$/;"	f
mr_poly_rem	mrfast.c	/^BOOL mr_poly_rem(_MIPD_ int dg,big *G,big *R)$/;"	f
mr_poly_sqr	mrfast.c	/^int mr_poly_sqr(_MIPD_ int degx,big *x,big *z)$/;"	f
mr_polymod_set	mrfast.c	/^void mr_polymod_set(_MIPD_ int n, big *rf,big *f)$/;"	f
mr_ps_big_mul	mrfast.c	/^int mr_ps_big_mul(_MIPD_ int deg,big *x,big *y,big *z)$/;"	f
mr_ps_zzn_mul	mrfast.c	/^int mr_ps_zzn_mul(_MIPD_ int deg,big *x,big *y,big *z)$/;"	f
mr_psub	mrarth0.c	/^void mr_psub(_MIPD_ big x,big y,big z)$/;"	f
mr_sdiv	mrarth1.c	/^mr_small mr_sdiv(_MIPD_ big x,mr_small sn,mr_large isn,big z)$/;"	f
mr_select	mrarth0.c	/^static void mr_select(_MIPD_ big x,int d,big y,big z)$/;"	f	file:
mr_setbase	mrcore.c	/^mr_small mr_setbase(_MIPD_ mr_small nb)$/;"	f
mr_shift	mrcore.c	/^void mr_shift(_MIPD_ big x,int n,big w)$/;"	f
mr_shiftbits	mrcore.c	/^mr_small mr_shiftbits(mr_small x,int n)$/;"	f
mr_size	miracl.h	99;"	d
mr_small	miracl.h	/^  typedef mr_utype mr_small;$/;"	t
mr_small	miracl.h	/^  typedef unsigned mr_utype mr_small;$/;"	t
mr_small_primes	mrcore.c	/^static const int mr_small_primes[]=$/;"	v	file:
mr_testbit	mrcore.c	/^int mr_testbit(_MIPD_ big x,int n)$/;"	f
mr_track	mrcore.c	/^void mr_track(_MIPDO_ )$/;"	f
mr_unsign32	mirdef.h	17;"	d
mr_unsign64	mirdef.h	27;"	d
mr_utype	mirdef.h	14;"	d
mr_vlarge	miracl.h	/^    typedef unsigned mr_qltype mr_vlarge;$/;"	t
mr_window	mrcore.c	/^int mr_window(_MIPD_ big x,int i,int *nbs,int * nzs,int window_size)$/;"	f
mr_window2	mrcore.c	/^int mr_window2(_MIPD_ big x,big y,int i,int *nbs,int *nzs)$/;"	f
msw	miracl.h	/^mr_small msw,lsw;$/;"	m
mul2_brick	mrec2m.c	/^int mul2_brick(_MIPD_ ebrick2 *B,big e,big x,big y)$/;"	f
mul_brick	mrebrick.c	/^int mul_brick(_MIPD_ ebrick *B,big e,big x,big y)$/;"	f
muldiv	mrcore.c	/^mr_small muldiv(mr_small a,mr_small b,mr_small c,mr_small m,mr_small *rp)$/;"	f
muldvd	miracl.h	1344;"	d
muldvd	miracl.h	1351;"	d
muldvd	mrcore.c	/^mr_small muldvd(mr_small a,mr_small b,mr_small c,mr_small *rp)$/;"	f
muldvd2	miracl.h	1345;"	d
muldvd2	miracl.h	1352;"	d
muldvd2	mrcore.c	/^void muldvd2(mr_small a,mr_small b,mr_small *c,mr_small *rp)$/;"	f
muldvm	mrcore.c	/^mr_small muldvm(mr_small a,mr_small c,mr_small m,mr_small *rp)$/;"	f
multi_inverse	mrxgcd.c	/^BOOL multi_inverse(_MIPD_ int m,big *x,big n,big *w)$/;"	f
multi_inverse2	mrgf2m.c	/^BOOL multi_inverse2(_MIPD_ int m,big *x,big *w)$/;"	f
multiply	mrarth2.c	/^void multiply(_MIPD_ big x,big y,big z)$/;"	f
multiply2	mrgf2m.c	/^void multiply2(_MIPD_ big x,big y,big w)$/;"	f
n	miracl.h	/^    big a,b,n;$/;"	m
n	miracl.h	/^    big n; $/;"	m
n	miracl.h	/^double db,n,p;$/;"	m
n	sm2.c	/^char *n;$/;"	m	struct:FPECC	file:
names	mrcore.c	/^static char *names[] =$/;"	v	file:
ndash	miracl.h	/^mr_small ndash;$/;"	m
ndig	miracl.h	/^int a,b,c,d,r,q,oldn,ndig;$/;"	m
negify	mrcore.c	/^void negify(flash x,flash y)$/;"	f
nib	miracl.h	/^int   nib;           \/* length of bigs  *\/$/;"	m
normalise	mrarth2.c	/^mr_small normalise(_MIPD_ big x,big y)$/;"	f
nprimes	miracl.h	/^int nprimes,degree;$/;"	m
nres	mrmonty.c	/^void nres(_MIPD_ big x,big y)$/;"	f
nres_complex	mrmonty.c	/^void nres_complex(_MIPD_ big a,big b,big r,big i)$/;"	f
nres_div2	mrmonty.c	/^void nres_div2(_MIPD_ big x,big w)$/;"	f
nres_div3	mrmonty.c	/^void nres_div3(_MIPD_ big x,big w)$/;"	f
nres_div5	mrmonty.c	/^void nres_div5(_MIPD_ big x,big w)$/;"	f
nres_dotprod	mrmonty.c	/^void nres_dotprod(_MIPD_ int n,big *x,big *y,big w)$/;"	f
nres_double_inverse	mrmonty.c	/^BOOL nres_double_inverse(_MIPD_ big x,big y,big w,big z)$/;"	f
nres_double_modadd	mrmonty.c	/^void nres_double_modadd(_MIPD_ big x,big y,big w)$/;"	f
nres_double_modsub	mrmonty.c	/^void nres_double_modsub(_MIPD_ big x,big y,big w)$/;"	f
nres_lazy	mrmonty.c	/^void nres_lazy(_MIPD_ big a0,big a1,big b0,big b1,big r,big i)$/;"	f
nres_lucas	mrlucas.c	/^void nres_lucas(_MIPD_ big p,big r,big vp,big v)$/;"	f
nres_modadd	mrmonty.c	/^void nres_modadd(_MIPD_ big x,big y,big w)$/;"	f
nres_moddiv	mrmonty.c	/^int nres_moddiv(_MIPD_ big x,big y,big w)$/;"	f
nres_modmult	mrmonty.c	/^void nres_modmult(_MIPD_ big x,big y,big w)$/;"	f
nres_modsub	mrmonty.c	/^void nres_modsub(_MIPD_ big x,big y,big w)$/;"	f
nres_multi_inverse	mrmonty.c	/^BOOL nres_multi_inverse(_MIPD_ int m,big *x,big *w)$/;"	f
nres_negate	mrmonty.c	/^void nres_negate(_MIPD_ big x, big w)$/;"	f
nres_powltr	mrpower.c	/^void nres_powltr(_MIPD_ int x,big y,big w)$/;"	f
nres_powmod	mrpower.c	/^void nres_powmod(_MIPD_ big x,big y,big w)$/;"	f
nres_powmod2	mrpower.c	/^void nres_powmod2(_MIPD_ big x,big y,big a,big b,big w)$/;"	f
nres_powmodn	mrpower.c	/^void nres_powmodn(_MIPD_ int n,big *x,big *y,big w)$/;"	f
nres_premult	mrmonty.c	/^void nres_premult(_MIPD_ big x,int k,big w)$/;"	f
nres_sqroot	mrsroot.c	/^BOOL nres_sqroot(_MIPD_ big x,big w)$/;"	f
nroot	mrarth3.c	/^BOOL nroot(_MIPD_ big x,int n,big w)$/;"	f
numbits	mrgf2m.c	/^static int numbits(big x)$/;"	f	file:
numdig	mrcore.c	/^int numdig(_MIPD_ big x)$/;"	f
numer	mrcore.c	/^void numer(_MIPD_ flash x,big y)$/;"	f
nxprime	mrprime.c	/^BOOL nxprime(_MIPD_ big w,big x)$/;"	f
nxsafeprime	mrprime.c	/^BOOL nxsafeprime(_MIPD_ int type,int subset,big w,big p)$/;"	f
objs	makefile	/^objs =  $(patsubst %.c,%.o,$(srcs))$/;"	m
oldn	miracl.h	/^int a,b,c,d,r,q,oldn,ndig;$/;"	m
one	miracl.h	/^big one;$/;"	m
otfile	miracl.h	/^FILE  *otfile;       \/* Output file      *\/$/;"	m
otnum	mrio1.c	/^int otnum(_MIPD_ flash x,FILE *filep)$/;"	f
otstr	mrio1.c	/^int otstr(_MIPD_ flash x,char *string)$/;"	f
p	miracl.h	/^double db,n,p;$/;"	m
p	sm2.c	/^char *p;$/;"	m	struct:FPECC	file:
pR	miracl.h	/^big pR;$/;"	m
pack	miracl.h	/^int   pack;          \/* packing density *\/$/;"	m
pack	mraes.c	/^static MR_WORD pack(const MR_BYTE *b)$/;"	f	file:
pack	mrgcm.c	/^static MR_WORD pack(const MR_BYTE *b)$/;"	f	file:
parity2	mrgf2m.c	/^int parity2(big x)$/;"	f
pi	miracl.h	/^flash pi;$/;"	m
pmod8	miracl.h	/^int pmod8;$/;"	m
pmod9	miracl.h	/^int pmod9;$/;"	m
point_at_infinity	mrcore.c	/^BOOL point_at_infinity(epoint *p)$/;"	f
pool	miracl.h	/^char pool[MR_HASH_BYTES];    \/* random pool *\/$/;"	m
pool_ptr	miracl.h	/^int pool_ptr;$/;"	m
pow_brick	mrbrick.c	/^void pow_brick(_MIPD_ brick *b,big e,big w)$/;"	f
power	mrarth3.c	/^void power(_MIPD_ big x,long n,big z,big w)$/;"	f
power2	mrgf2m.c	/^void power2(_MIPD_ big x,int m,big w)$/;"	f
powltr	mrpower.c	/^int powltr(_MIPD_ int x, big y, big n, big w)$/;"	f
powmod	mrpower.c	/^void powmod(_MIPD_ big x,big y,big n,big w)$/;"	f
powmod2	mrpower.c	/^void powmod2(_MIPD_ big x,big y,big a,big b,big n,big w)$/;"	f
powmodn	mrpower.c	/^void powmodn(_MIPD_ int n,big *x,big *y,big p,big w)$/;"	f
precompute	mrgcm.c	/^static void precompute(gcm *g,MR_BYTE *H)$/;"	f	file:
premult	mrarth1.c	/^void premult(_MIPD_ big x,int n,big z)$/;"	f
prepare_basis	mrgf2m.c	/^BOOL prepare_basis(_MIPD_ int m,int a,int b,int c,BOOL check)$/;"	f
prepare_monty	mrmonty.c	/^mr_small prepare_monty(_MIPD_ big n)$/;"	f
prepare_naf	mrec2m.c	/^static void prepare_naf(_MIPD_ big e,big hp,big hn)$/;"	f	file:
prime	miracl.h	/^mr_utype *prime,*cr;$/;"	m
product	mraes.c	/^static MR_BYTE product(MR_WORD x,MR_WORD y)$/;"	f	file:
ptab	mraes.c	/^static const MR_BYTE ptab[]=$/;"	v	file:
putdig	mrcore.c	/^void putdig(_MIPD_ int n,big x,int i)$/;"	f
q	miracl.h	/^int a,b,c,d,r,q,oldn,ndig;$/;"	m
qdiv	mrxgcd.c	/^static mr_small qdiv(mr_large u,mr_large v)$/;"	f	file:
qdiv	mrxgcd.c	/^static mr_small qdiv(mr_small u,mr_small v)$/;"	f	file:
qnr	miracl.h	/^int qnr;    \/* a QNR -1 for p=3 mod 4, -2 for p=5 mod 8, 0 otherwise *\/$/;"	m
quad2	mrgf2m.c	/^BOOL quad2(_MIPD_ big b,big w)$/;"	f
r	miracl.h	/^int a,b,c,d,r,q,oldn,ndig;$/;"	m
radom	sm2.c	/^unsigned char radom[]  = {0x6C,0xB2,0x8D,0x99,0x38,0x5C,0x17,0x5C,0x94,0xF9,0x4E,0x93,0x48,0x17,0x66,0x3F,0xC1,0x76,0xD9,0x25,0xDD,0x72,0xB7,0x27,0x26,0x0D,0xBA,0xAE,0x1F,0xB2,0xF9,0x6F};$/;"	v
radom1	sm2.c	/^unsigned char radom1[] = {0x4C,0x62,0xEE,0xFD,0x6E,0xCF,0xC2,0xB9,0x5B,0x92,0xFD,0x6C,0x3D,0x95,0x75,0x14,0x8A,0xFA,0x17,0x42,0x55,0x46,0xD4,0x90,0x18,0xE5,0x38,0x8D,0x49,0xDD,0x7B,0x4F};$/;"	v
rand2	mrgf2m.c	/^void rand2(_MIPD_ big x)$/;"	f
randkey	sm2.c	/^unsigned char randkey[] = {0x83,0xA2,0xC9,0xC8,0xB9,0x6E,0x5A,0xF7,0x0B,0xD4,0x80,0xB4,0x72,0x40,0x9A,0x9A,0x32,0x72,0x57,0xF1,0xEB,0xB7,0x3F,0x5B,0x07,0x33,0x54,0xB2,0x48,0x66,0x85,0x63};$/;"	v
randkeyb	sm2.c	/^unsigned char randkeyb[]= {0x33,0xFE,0x21,0x94,0x03,0x42,0x16,0x1C,0x55,0x61,0x9C,0x4A,0x0C,0x06,0x02,0x93,0xD5,0x43,0xC8,0x0A,0xF1,0x97,0x48,0xCE,0x17,0x6D,0x83,0x47,0x7D,0xE7,0x1C,0x80};$/;"	v
rbsub	mraes.c	/^static const MR_BYTE rbsub[]=$/;"	v	file:
rco	mraes.c	/^static const MR_WORD rco[]=$/;"	v	file:
recode	mrcore.c	/^int recode(_MIPD_ big e,int t,int w,int i)$/;"	f
redc	mrmonty.c	/^void redc(_MIPD_ big x,big y)$/;"	f
reduce2	mrgf2m.c	/^void reduce2(_MIPD_ big y,big x)$/;"	f
remain	mrarth1.c	/^int remain(_MIPD_ big x,int n)$/;"	f
remain2	mrgf2m.c	/^static void remain2(_MIPD_ big y,big x)$/;"	f	file:
rkey	miracl.h	/^mr_unsign32 rkey[60];$/;"	m
rndptr	miracl.h	/^int         rndptr;   \/* ...array & pointer *\/$/;"	m
roots	miracl.h	/^mr_utype *inverse,**roots;$/;"	m
rtable	mraes.c	/^static const MR_WORD rtable[]=$/;"	v	file:
rtable1	mraes.c	/^static const MR_WORD rtable1[]=$/;"	v	file:
rtable2	mraes.c	/^static const MR_WORD rtable2[]=$/;"	v	file:
rtable3	mraes.c	/^static const MR_WORD rtable3[]=$/;"	v	file:
s1	miracl.h	/^mr_utype **s1,**s2;   \/* pre-computed tables for polynomial reduction *\/$/;"	m
s2	miracl.h	/^mr_utype **s1,**s2;   \/* pre-computed tables for polynomial reduction *\/$/;"	m
same	miracl.h	/^BOOL same;$/;"	m
sbrand	mrstrong.c	/^static mr_unsign32 sbrand(csprng *rng)$/;"	f	file:
scrt	mrscrt.c	/^void scrt(_MIPD_ small_chinese *c,mr_utype *u,big x)$/;"	f
scrt_end	mrscrt.c	/^void scrt_end(small_chinese *c)$/;"	f
scrt_init	mrscrt.c	/^BOOL scrt_init(_MIPD_ small_chinese *c,int r,mr_utype *moduli)$/;"	f
set_io_buffer_size	mrcore.c	/^void set_io_buffer_size(_MIPD_ int len)$/;"	f
set_mip	mrcore.c	/^    void set_mip(miracl *mip)$/;"	f
set_user_function	mrcore.c	/^void set_user_function(_MIPD_ BOOL (*user)(void))$/;"	f
sftbit	mrbits.c	/^void sftbit(_MIPD_ big x,int n,big z)$/;"	f
sgcd	mrcore.c	/^mr_small sgcd(mr_small x,mr_small y)$/;"	f
sha	miracl.h	/^typedef sha256 sha;$/;"	t
sha256	miracl.h	/^} sha256;$/;"	t
sha384	miracl.h	/^typedef sha512 sha384;$/;"	t
sha512	miracl.h	/^} sha512;$/;"	t
shiftleftbits	mrgf2m.c	/^static void shiftleftbits(big x,int m)$/;"	f	file:
shs256_hash	mrshs256.c	/^void shs256_hash(sha256 *sh,char hash[32])$/;"	f
shs256_init	mrshs256.c	/^void shs256_init(sha256 *sh)$/;"	f
shs256_process	mrshs256.c	/^void shs256_process(sha256 *sh,int byte)$/;"	f
shs384_hash	mrshs512.c	/^void shs384_hash(sha384 *sh,char hash[48])$/;"	f
shs384_init	mrshs512.c	/^void shs384_init(sha384 *sh)$/;"	f
shs384_process	mrshs512.c	/^void shs384_process(sha384 *sh,int byte)$/;"	f
shs512_hash	mrshs512.c	/^void shs512_hash(sha512 *sh,char hash[64])$/;"	f
shs512_init	mrshs512.c	/^void shs512_init(sha512 *sh)$/;"	f
shs512_process	mrshs512.c	/^void shs512_process(sha512 *sh,int byte)$/;"	f
shs_hash	mrshs.c	/^void shs_hash(sha *sh,char hash[20])$/;"	f
shs_init	mrshs.c	/^void shs_init(sha *sh)$/;"	f
shs_process	mrshs.c	/^void shs_process(sha *sh,int byte)$/;"	f
shs_transform	mrshs.c	/^static void shs_transform(sha *sh)$/;"	f	file:
shs_transform	mrshs256.c	/^static void shs_transform(sha256 *sh)$/;"	f	file:
shs_transform	mrshs512.c	/^static void shs_transform(sha512 *sh)$/;"	f	file:
sirand	mrstrong.c	/^static void sirand(csprng* rng,mr_unsign32 seed)$/;"	f	file:
size	mrcore.c	/^int size(big x)$/;"	f
sm2_decrypt	sm2.c	/^int sm2_decrypt(unsigned char *msg,int msglen, unsigned char *privkey, int privkeylen, unsigned char *outmsg)$/;"	f
sm2_encrypt	sm2.c	/^int sm2_encrypt(unsigned char *msg,int msglen, unsigned char *wx,int wxlen, unsigned char *wy,int wylen, unsigned char *outmsg)$/;"	f
sm2_keyagreement_a1_3	sm2.c	/^void sm2_keyagreement_a1_3(unsigned char *kx1, int *kx1len, $/;"	f
sm2_keyagreement_a4_10	sm2.c	/^int sm2_keyagreement_a4_10( $/;"	f
sm2_keyagreement_b10	sm2.c	/^void sm2_keyagreement_b10( $/;"	f
sm2_keyagreement_b1_9	sm2.c	/^int sm2_keyagreement_b1_9( $/;"	f
sm2_keygen	sm2.c	/^void sm2_keygen(unsigned char *wx, int *wxlen, unsigned char *wy, int *wylen,unsigned char *privkey, int *privkeylen)$/;"	f
sm2_par_dig	sm2.c	/^unsigned char sm2_par_dig[128] = {$/;"	v
sm2_sign	sm2.c	/^void sm2_sign(unsigned char *hash,int hashlen,unsigned char *privkey,int privkeylen,unsigned char *cr,int *rlen,unsigned char *cs,int *slen)$/;"	f
sm2_verify	sm2.c	/^int sm2_verify(unsigned char *hash,int hashlen,unsigned char  *cr,int rlen,unsigned char *cs,int slen, unsigned char *wx,int wxlen, unsigned char *wy,int wylen)$/;"	f
sm3_e	sm2.c	/^int sm3_e(unsigned char *userid, int userid_len, unsigned char *xa, int xa_len, unsigned char *ya, int ya_len, unsigned char *msg, int msg_len, unsigned char *e)$/;"	f
sm3_z	sm2.c	/^int sm3_z(unsigned char *userid, int userid_len, unsigned char *xa, int xa_len, unsigned char *ya, int ya_len, unsigned char *z)$/;"	f
small_chinese	miracl.h	/^} small_chinese;$/;"	t
smul	mrsmall.c	/^mr_small smul(mr_small x,mr_small y,mr_small n)$/;"	f
spmd	mrsmall.c	/^mr_small spmd(mr_small x,mr_small n,mr_small m) $/;"	f
sqrmp	mrsmall.c	/^mr_small sqrmp(mr_small x,mr_small m)$/;"	f
sqroot	mrsroot.c	/^BOOL sqroot(_MIPD_ big x,big p,big w)$/;"	f
sqroot2	mrgf2m.c	/^void sqroot2(_MIPD_ big x,big y)$/;"	f
square2	mrgf2m.c	/^static void square2(big x,big w)$/;"	f	file:
srcs	makefile	/^srcs	= $(wildcard *.c)$/;"	m
sru	miracl.h	/^big sru;$/;"	m
stateX	miracl.h	/^MR_BYTE stateX[16];$/;"	m
status	miracl.h	/^int status;$/;"	m
stprec	miracl.h	/^int   stprec;        \/* start precision *\/$/;"	m
strong_bigdig	mrstrong.c	/^void strong_bigdig(_MIPD_ csprng *rng,int n,int b,big x)$/;"	f
strong_bigrand	mrstrong.c	/^void strong_bigrand(_MIPD_ csprng *rng,big w,big x)$/;"	f
strong_init	mrstrong.c	/^void strong_init(csprng *rng,int rawlen,char *raw,mr_unsign32 tod)$/;"	f
strong_kill	mrstrong.c	/^void strong_kill(csprng *rng)$/;"	f
strong_rng	mrstrong.c	/^int strong_rng(csprng *rng)$/;"	f
subdiv	mrarth1.c	/^int subdiv(_MIPD_ big x,int n,big z)$/;"	f
subdivisible	mrarth1.c	/^BOOL subdivisible(_MIPD_ big x,int n)$/;"	f
subtract	mrarth0.c	/^void subtract(_MIPD_ big x,big y,big z)$/;"	f
t	miracl.h	/^mr_utype **t;         \/* workspace *\/$/;"	m
table	miracl.h	/^    const mr_small *table; $/;"	m
table	miracl.h	/^    const mr_small *table;$/;"	m
table	miracl.h	/^mr_unsign32 table[128][4]; \/* 2k bytes *\/$/;"	m
table_init	mrec2m.c	/^static void table_init(_MIPD_ epoint *g,epoint **table)$/;"	f	file:
tconvert	mrcore.c	/^void tconvert(_MIPD_ mr_utype n,big x)$/;"	f
theta0	mrshs256.c	44;"	d	file:
theta0	mrshs512.c	115;"	d	file:
theta1	mrshs256.c	45;"	d	file:
theta1	mrshs512.c	116;"	d	file:
tnaf	mrec2m.c	/^static int tnaf(_MIPD_ big e,big hp,big hn)$/;"	f	file:
trace	miracl.h	/^int   trace[MR_MAXDEPTH];    \/* .. mechanism    *\/$/;"	m
trace2	mrgf2m.c	/^int trace2(_MIPD_ big x)$/;"	f
trial_division	mrprime.c	/^int trial_division(_MIPD_ big x,big y)$/;"	f
twop	mrfast.c	/^static mr_utype twop(int n)$/;"	f	file:
u	miracl.h	/^mr_small u,v,ku,kv;$/;"	m
uconvert	mrcore.c	/^void uconvert(_MIPD_ unsigned int n ,big x)$/;"	f
ulgconv	mrcore.c	/^void ulgconv(_MIPD_ unsigned long n,big x)$/;"	f
unpack	mraes.c	/^static void unpack(MR_WORD a,MR_BYTE *b)$/;"	f	file:
unpack	mrgcm.c	/^static void unpack(MR_WORD a,MR_BYTE *b)$/;"	f	file:
user	miracl.h	/^BOOL (*user)(void);  \/* pointer to user supplied function *\/$/;"	m
v	miracl.h	/^mr_small u,v,ku,kv;$/;"	m
w	miracl.h	/^    mr_small *w;$/;"	m	struct:bigtype
w	miracl.h	/^mr_unsign32 w[80];$/;"	m
w	miracl.h	/^mr_unsign64 w[80];$/;"	m
w0	miracl.h	/^big w0;            \/* workspace bigs  *\/$/;"	m
w1	miracl.h	/^big w1,w2,w3,w4;$/;"	m
w10	miracl.h	/^big w8,w9,w10,w11;$/;"	m
w11	miracl.h	/^big w8,w9,w10,w11;$/;"	m
w12	miracl.h	/^big w12,w13,w14,w15;$/;"	m
w13	miracl.h	/^big w12,w13,w14,w15;$/;"	m
w14	miracl.h	/^big w12,w13,w14,w15;$/;"	m
w15	miracl.h	/^big w12,w13,w14,w15;$/;"	m
w2	miracl.h	/^big w1,w2,w3,w4;$/;"	m
w3	miracl.h	/^big w1,w2,w3,w4;$/;"	m
w4	miracl.h	/^big w1,w2,w3,w4;$/;"	m
w5	miracl.h	/^big w5,w6,w7;$/;"	m
w6	miracl.h	/^big w5,w6,w7;$/;"	m
w7	miracl.h	/^big w5,w6,w7;$/;"	m
w8	miracl.h	/^big w8,w9,w10,w11;$/;"	m
w9	miracl.h	/^big w8,w9,w10,w11;$/;"	m
wa	miracl.h	/^mr_utype *wa;$/;"	m
wb	miracl.h	/^mr_utype *wb;$/;"	m
wc	miracl.h	/^mr_utype *wc;$/;"	m
window	miracl.h	/^    int window;$/;"	m
workprec	miracl.h	/^int   workprec;$/;"	m
workspace	miracl.h	/^char *workspace;$/;"	m
workspace	miracl.h	/^char workspace[MR_BIG_RESERVE(MR_SPACES)];$/;"	m
ws	miracl.h	/^big ws,wt;$/;"	m
wt	miracl.h	/^big ws,wt;$/;"	m
x	miracl.h	/^    zzn2 x;$/;"	m
x	sm2.c	/^char *x;$/;"	m	struct:FPECC	file:
xgcd	mrxgcd.c	/^int xgcd(_MIPD_ big x,big y,big xd,big yd,big z)$/;"	f
y	miracl.h	/^    zzn2 y;$/;"	m
y	sm2.c	/^char *y;$/;"	m	struct:FPECC	file:
z	miracl.h	/^    zzn2 z;$/;"	m
zero	mrcore.c	/^void zero(flash x)$/;"	f
zzn	miracl.h	/^typedef big zzn;$/;"	t
zzn2	miracl.h	/^} zzn2;$/;"	t
zzn2_add	mrzzn2.c	/^void zzn2_add(_MIPD_ zzn2 *x,zzn2 *y,zzn2 *w)$/;"	f
zzn2_compare	mrzzn2.c	/^BOOL zzn2_compare(zzn2 *x,zzn2 *y)$/;"	f
zzn2_conj	mrzzn2.c	/^void zzn2_conj(_MIPD_ zzn2 *x,zzn2 *w)$/;"	f
zzn2_copy	mrzzn2.c	/^void zzn2_copy(zzn2 *x,zzn2 *w)$/;"	f
zzn2_div2	mrzzn2.c	/^void zzn2_div2(_MIPD_ zzn2 *w)$/;"	f
zzn2_div3	mrzzn2.c	/^void zzn2_div3(_MIPD_ zzn2 *w)$/;"	f
zzn2_div5	mrzzn2.c	/^void zzn2_div5(_MIPD_ zzn2 *w)$/;"	f
zzn2_from_big	mrzzn2.c	/^void zzn2_from_big(_MIPD_ big x, zzn2 *w)$/;"	f
zzn2_from_bigs	mrzzn2.c	/^void zzn2_from_bigs(_MIPD_ big x,big y, zzn2 *w)$/;"	f
zzn2_from_int	mrzzn2.c	/^void zzn2_from_int(_MIPD_ int i,zzn2 *w)$/;"	f
zzn2_from_ints	mrzzn2.c	/^void zzn2_from_ints(_MIPD_ int i,int j,zzn2 *w)$/;"	f
zzn2_from_zzn	mrzzn2.c	/^void zzn2_from_zzn(big x,zzn2 *w)$/;"	f
zzn2_from_zzns	mrzzn2.c	/^void zzn2_from_zzns(big x,big y,zzn2 *w)$/;"	f
zzn2_imul	mrzzn2.c	/^void zzn2_imul(_MIPD_ zzn2 *x,int y,zzn2 *w)$/;"	f
zzn2_inv	mrzzn2.c	/^void zzn2_inv(_MIPD_ zzn2 *w)$/;"	f
zzn2_isunity	mrzzn2.c	/^BOOL zzn2_isunity(_MIPD_ zzn2 *x)$/;"	f
zzn2_iszero	mrzzn2.c	/^BOOL zzn2_iszero(zzn2 *x)$/;"	f
zzn2_mul	mrzzn2.c	/^void zzn2_mul(_MIPD_ zzn2 *x,zzn2 *y,zzn2 *w)$/;"	f
zzn2_multi_inverse	mrzzn2b.c	/^BOOL zzn2_multi_inverse(_MIPD_ int m,zzn2 *x,zzn2 *w)$/;"	f
zzn2_negate	mrzzn2.c	/^void zzn2_negate(_MIPD_ zzn2 *x,zzn2 *w)$/;"	f
zzn2_qr	mrzzn2b.c	/^BOOL zzn2_qr(_MIPD_ zzn2 *u)$/;"	f
zzn2_sadd	mrzzn2.c	/^void zzn2_sadd(_MIPD_ zzn2 *x,big y,zzn2 *w)$/;"	f
zzn2_smul	mrzzn2.c	/^void zzn2_smul(_MIPD_ zzn2 *x,big y,zzn2 *w)$/;"	f
zzn2_sqr	mrzzn2.c	/^void zzn2_sqr(_MIPD_ zzn2 *x,zzn2 *w)$/;"	f
zzn2_sqrt	mrzzn2b.c	/^BOOL zzn2_sqrt(_MIPD_ zzn2 *u,zzn2 *w)$/;"	f
zzn2_ssub	mrzzn2.c	/^void zzn2_ssub(_MIPD_ zzn2 *x,big y,zzn2 *w)$/;"	f
zzn2_sub	mrzzn2.c	/^void zzn2_sub(_MIPD_ zzn2 *x,zzn2 *y,zzn2 *w)$/;"	f
zzn2_timesi	mrzzn2.c	/^void zzn2_timesi(_MIPD_ zzn2 *u)$/;"	f
zzn2_txd	mrzzn2.c	/^void zzn2_txd(_MIPD_ zzn2 *u)$/;"	f
zzn2_txx	mrzzn2.c	/^void zzn2_txx(_MIPD_ zzn2 *u)$/;"	f
zzn2_zero	mrzzn2.c	/^void zzn2_zero(zzn2 *w)$/;"	f
zzn3	miracl.h	/^} zzn3;$/;"	t
zzn3_add	mrzzn3.c	/^void zzn3_add(_MIPD_ zzn3 *x,zzn3 *y,zzn3 *w)$/;"	f
zzn3_compare	mrzzn3.c	/^BOOL zzn3_compare(zzn3 *x,zzn3 *y)$/;"	f
zzn3_copy	mrzzn3.c	/^void zzn3_copy(zzn3 *x,zzn3 *w)$/;"	f
zzn3_div2	mrzzn3.c	/^void zzn3_div2(_MIPD_ zzn3 *w)$/;"	f
zzn3_from_big	mrzzn3.c	/^void zzn3_from_big(_MIPD_ big x, zzn3 *w)$/;"	f
zzn3_from_bigs	mrzzn3.c	/^void zzn3_from_bigs(_MIPD_ big x,big y,big z,zzn3 *w)$/;"	f
zzn3_from_int	mrzzn3.c	/^void zzn3_from_int(_MIPD_ int i,zzn3 *w)$/;"	f
zzn3_from_ints	mrzzn3.c	/^void zzn3_from_ints(_MIPD_ int i,int j,int k,zzn3 *w)$/;"	f
zzn3_from_zzn	mrzzn3.c	/^void zzn3_from_zzn(big x,zzn3 *w)$/;"	f
zzn3_from_zzn_1	mrzzn3.c	/^void zzn3_from_zzn_1(big x,zzn3 *w)$/;"	f
zzn3_from_zzn_2	mrzzn3.c	/^void zzn3_from_zzn_2(big x,zzn3 *w)$/;"	f
zzn3_from_zzns	mrzzn3.c	/^void zzn3_from_zzns(big x,big y,big z,zzn3 *w)$/;"	f
zzn3_imul	mrzzn3.c	/^void zzn3_imul(_MIPD_ zzn3 *x,int y,zzn3 *w)$/;"	f
zzn3_inv	mrzzn3.c	/^void zzn3_inv(_MIPD_ zzn3 *w)$/;"	f
zzn3_isunity	mrzzn3.c	/^BOOL zzn3_isunity(_MIPD_ zzn3 *x)$/;"	f
zzn3_iszero	mrzzn3.c	/^BOOL zzn3_iszero(zzn3 *x)$/;"	f
zzn3_mul	mrzzn3.c	/^void zzn3_mul(_MIPD_ zzn3 *x,zzn3 *y,zzn3 *w)$/;"	f
zzn3_negate	mrzzn3.c	/^void zzn3_negate(_MIPD_ zzn3 *x,zzn3 *w)$/;"	f
zzn3_powq	mrzzn3.c	/^void zzn3_powq(_MIPD_ zzn3 *x,zzn3 *w)$/;"	f
zzn3_sadd	mrzzn3.c	/^void zzn3_sadd(_MIPD_ zzn3 *x,big y,zzn3 *w)$/;"	f
zzn3_set	mrzzn3.c	/^void zzn3_set(_MIPD_ int cnr,big sru)$/;"	f
zzn3_smul	mrzzn3.c	/^void zzn3_smul(_MIPD_ zzn3 *x,big y,zzn3 *w)$/;"	f
zzn3_ssub	mrzzn3.c	/^void zzn3_ssub(_MIPD_ zzn3 *x,big y,zzn3 *w)$/;"	f
zzn3_sub	mrzzn3.c	/^void zzn3_sub(_MIPD_ zzn3 *x,zzn3 *y,zzn3 *w)$/;"	f
zzn3_timesi	mrzzn3.c	/^void zzn3_timesi(_MIPD_ zzn3 *u)$/;"	f
zzn3_timesi2	mrzzn3.c	/^void zzn3_timesi2(_MIPD_ zzn3 *u)$/;"	f
zzn3_zero	mrzzn3.c	/^void zzn3_zero(zzn3 *w)$/;"	f
zzn6_3x2	miracl.h	/^} zzn6_3x2;$/;"	t
