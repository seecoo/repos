// Automatically generated codes
// Generated Date and Time 20090826141612
// Generated by ud090401

#ifndef _unionMngSvrList_
#define _unionMngSvrList_


// 定义表的域名常量
#define conMngSvrListFldNameID		"ID"
#define conMngSvrListFldNameManagerDepartment		"managerDepartment"
#define conMngSvrListFldNameIpAddr		"ipAddr"
#define conMngSvrListFldNamePort		"port"
#define conMngSvrListFldNameMngSvrBrothers		"mngSvrBrothers"
#define conMngSvrListFldNameRemark		"remark"
#define conMngSvrListFldNameInputTeller		"inputTeller"
#define conMngSvrListFldNameInputDate		"inputDate"
#define conMngSvrListFldNameInputTime		"inputTime"
#define conMngSvrListFldNameUpdateTeller		"updateTeller"
#define conMngSvrListFldNameUpdateDate		"updateDate"
#define conMngSvrListFldNameUpdateTime		"updateTime"

/*
*** 结构对应的表信息 ***
表名::          mngSvrList
表名宏定义::    conTBLNameMngSvrList
表资源宏定义::  conResIDMngSvrList
关键字::        ID
*/

// 定义表记录对应的结构
typedef struct
{
	char	ID[40+1];	// 用户定义的，用于唯一识别一条记录的名称
	char	managerDepartment[40+1];	// 主管部门
	char	ipAddr[16+1];	// 服务器IP地址
	int	port;	// 服务器端口
	char	mngSvrBrothers[256+1];	// 同组配置管理中心
	char	remark[128+1];	// 128个字符的说明
	char	inputTeller[20+1];	// 记录插入数据库时，系统自动附加的操作员标识
	char	inputDate[8+1];	// 记录插入数据库时，系统自动附加的日期
	char	inputTime[6+1];	// 记录插入数据库时，系统自动附加的时间
	char	updateTeller[20+1];	// 记录修改时，系统自动附加的操作员标识
	char	updateDate[8+1];	// 记录修改时，系统自动附加的日期
	char	updateTime[6+1];	// 记录修改时，系统自动附加的时间
} TUnionMngSvrList;
typedef TUnionMngSvrList	*PUnionMngSvrList;

//***** 以下定义函数声明 *****


/*
功能：
	结构的缺省赋值函数
输入参数:
	prec	记录指针
输出参数:
	无
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormDefaultValueOfMngSvrListRec(PUnionMngSvrList prec);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormRecStrFromMngSvrListRec(PUnionMngSvrList prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormPrimaryKeyRecStrFromMngSvrListRec(PUnionMngSvrList prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录字串转换为记录结构的关键字的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormPrimaryKeyOfMngSvrListRecFromRecStr(char *recStr,int lenOfRecStr,PUnionMngSvrList prec);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormNonPrimaryKeyRecStrFromMngSvrListRec(PUnionMngSvrList prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormMngSvrListRecFromRecStr(char *recStr,int lenOfRecStr,PUnionMngSvrList prec);


/*
功能：
	插入一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionInsertMngSvrListRec(PUnionMngSvrList prec);


/*
功能：
	删除一个记录
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionDeleteMngSvrListRec(char *ID);
/*
函数功能:
	修改指定的表域:
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
	fldName 域名称
	fldValue 域值
	fldValueLen 域值长度
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionUpdateSpecFldOfMngSvrListRec(char *ID,char *fldName,char *fldValue,int lenOfFldValue);
/*
函数功能:
	修改指定的表域:
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
	fldName 域名称
	fldValue 域值
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionUpdateIntTypeSpecFldOfMngSvrListRec(char *ID,char *fldName,int fldValue);


/*
功能：
	修改一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionUpdateMngSvrListRec(PUnionMngSvrList prec);


/*
功能：
	读取一个记录
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionReadMngSvrListRec(char *ID,PUnionMngSvrList prec);


/*
功能：
	读取一个记录
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
	fldName		域名
	sizeOfBuf	域值缓冲大小
输出参数:
	fldValue	域值
返回值
	>=0		成功，返回域值的长度
	<0		失败,错误码
*/
int UnionReadMngSvrListRecFld(char *ID,char *fldName,char *fldValue,int sizeOfBuf);


/*
功能：
	读取一个记录
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
	fldName		域名
输出参数:
	fldValue	域值
返回值
	>=0		成功，返回域值的长度
	<0		失败,错误码
*/
int UnionReadMngSvrListRecIntTypeFld(char *ID,char *fldName,int *fldValue);


/*
功能：
	根据条件，批量读取数据
输入参数:
	condition	条件字串
	maxRecNum		读取的最大记录数量
输出参数:
	recGrp		记录数组
返回值
	>=0		成功,读取的记录数量
	<0		失败,错误码
*/
int UnionBatchReadMngSvrListRec(char *condition,TUnionMngSvrList recGrp[],int maxRecNum);

//***** 函数声明结束 *****

#endif
