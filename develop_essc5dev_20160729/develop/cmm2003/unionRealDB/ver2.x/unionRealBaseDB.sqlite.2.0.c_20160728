#ifndef _realBaseDB_2_x_
#define _realBaseDB_2_x_
#endif

#ifndef _UnionLogMDL_3_x_
#define _UnionLogMDL_3_x_
#endif

#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <unistd.h>

#include "UnionLog.h"
#include "UnionStr.h"
#include "unionErrCode.h"
#include "unionTableDef.h"
#include "unionRealBaseDB.h"

#include "unionREC.h"
#include "unionRealDBCommon.h"
#include "unionXMLPackage.h"
#include "unionDataSync.h"

#include <sqlite3.h>

sqlite3	*gunionSQLite[DB_NUM] = {0};
char	*gunionErrMsg = NULL;

int get_one_integer_value(void *arg ,int nCount,char** pValue,char** pName)
{
	int	*iCnt = (int *)arg;
	if (nCount > 1)
	{
		UnionUserErrLog("in get_one_integer_value:: nCount[%d] > 1\n",nCount);
		return(errCodeDatabaseMDL_MoreRecordFound);
	}
	*iCnt = atoi(pValue[0]);
	return(*iCnt);
}

// 取值数据库错误码，并设置日志的错误码
int UnionGetDBErrCode(int errcode)
{
	int	ret = 0;

	ret = 0 - abs(errcode);
	UnionUserErrLog("in UnionGetDBErrCode:::: errcode = [%d] errstr = [%s]\n", errcode, gunionErrMsg);
	UnionSetResponseRemark(gunionErrMsg);
	sqlite3_free(gunionErrMsg);
	
	ret += errCodeOffsetOfSqlite;

	return(UnionSetUserDefinedErrorCode(ret));
}

// 是否是数据致命错误(需要重连数据库的错误，在unionREC表中配置)
int UnionIsFatalDBErrCode(int dbErrCode)
{
	char	varName[32];

	snprintf(varName, sizeof(varName),"fatalSQLITEDBErr%d", abs(dbErrCode));
	if (UnionReadIntTypeRECVar(varName) > 0)
	{
		return(1);
	}

	return 0;
}

int UnionConnectDB()
{
	int		ret;
	char		tmpBuf[128];
	char		dbName[256];
        
        UnionInitDatabaseConfig();	

	memset(tmpBuf, 0, sizeof(tmpBuf));
	UnionGetDBNAME(tmpBuf);
	if (strlen(tmpBuf) == 0)
	{
		UnionUserErrLog("in UnionConnectDB:: dbName not set\n");
		return(errCodeParameter);
	}

	if (UnionGetDatabaseIndex() > 0)
		snprintf(dbName,sizeof(dbName),"%s/%s_%d.db",getenv("UNIONETC"),tmpBuf,UnionGetDatabaseIndex());
	else	
		snprintf(dbName,sizeof(dbName),"%s/%s.db",getenv("UNIONETC"),tmpBuf);
	
	UnionProgramerLog("in UnionConnectDB:: try to connect dbName = [%s] !\n", dbName);
	
	/*
	ret = sqlite3_open(dbName,&gunionSQLite[UnionGetDatabaseIndex()]);
	if (ret != SQLITE_OK)
	{
		UnionUserErrLog("in UnionConnectDB:: failure errcode = [%d] dbName = [%s]!\n", ret, dbName);
		return(0 - abs(ret));
	}
	
	ret = sqlite3_exec(gunionSQLite[UnionGetDatabaseIndex()], "PRAGMA synchronous = OFF; ", 0,0,0);
	if (ret != SQLITE_OK)
	{
		UnionUserErrLog("in UnionConnectDB:: sqlite3_exec errcode=[%d]!\n", ret);
		ret = UnionGetDBErrCode(ret); 
		UnionCloseDatabase();
		return(ret);
	}
	*/
	// 20150508 zhangyd修改，增加对SQLITE_BUSY的判断
	while(1)
	{
		ret = sqlite3_open(dbName,&gunionSQLite[UnionGetDatabaseIndex()]);
		if (ret != SQLITE_OK)
		{
			if (ret == SQLITE_BUSY)
			{
				usleep(10);
				continue;
			}
			UnionUserErrLog("in UnionConnectDB:: failure errcode = [%d] dbName = [%s]!\n", ret, dbName);
			return(0 - abs(ret));
		}
		break;
	}

	while(1)
	{
		ret = sqlite3_exec(gunionSQLite[UnionGetDatabaseIndex()], "PRAGMA synchronous = OFF; ", 0,0,0);
		if (ret != SQLITE_OK)
		{
			if (ret == SQLITE_BUSY)
			{
				usleep(10);
				sqlite3_close(gunionSQLite[UnionGetDatabaseIndex()]);
				continue;
			}
			UnionUserErrLog("in UnionConnectDB:: sqlite3_exec errcode=[%d]!\n", ret);
			ret = UnionGetDBErrCode(ret); 
			sqlite3_close(gunionSQLite[UnionGetDatabaseIndex()]);
			return(ret);
		}
		break;
	}
	
	UnionLog("in UnionConnectDB:: connect dbName = [%s] OK!\n",dbName);
	
	return(0);
}

int UnionCloseDB()
{
	int	ret;
	
	if ((ret = sqlite3_close(gunionSQLite[UnionGetDatabaseIndex()])) != SQLITE_OK)
		UnionUserErrLog("in UnionCloseDB:: sqlite3_close ret = [%d]\n", ret);
	else
		UnionLog("in UnionCloseDB:: close DB OK!\n");

	return(0);
}

int UnionSelectRealDBRecord2(char *sql,int currentPage,int numOfPerPage,select_callback callback,void *pArg)
{
	int	i,j;
	char    tmpBuf[32];
	int	ret;

	char	dbSql[8192*2];
	char	*sqlPtr = NULL;

	char	tableName[128];
	int	index;
	char	**dbResult;
	int	nRow, nColumn;

	if (sql == NULL)
	{
		UnionUserErrLog("in UnionSelectRealDBRecord2:: sql is null\n");
		return(errCodeParameter);
	}
 
	if ((ret = UnionGetTableNameAndFieldNameFromSQL(sql,tableName,NULL)) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecord2:: UnionGetTableNameAndFieldNameFromSQL!\n");
		return(ret);
	}
	
	if ((ret = UnionGetDBIndexByTableName(tableName)) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecord2:: UnionGetDBIndexByTableName!\n");
		return(ret);
	}
	UnionSetDatabaseIndex(ret);

	if ((ret = UnionConnectDatabase()) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecord2:: UnionConnectDatabase!\n");
		return(ret);
	}
	
	if ((currentPage <= 0) || (numOfPerPage <= 0))
		sqlPtr = sql;
	else
	{
		snprintf(dbSql,sizeof(dbSql),"%s limit %d offset %d",sql,numOfPerPage,(currentPage - 1) * numOfPerPage);
		sqlPtr = dbSql;
	}

	UnionProgramerLog("in UnionSelectRealDBRecord2:: sql = [%s]!\n",sqlPtr);

	while(1)
	{
		ret = sqlite3_get_table(gunionSQLite[UnionGetDatabaseIndex()],sqlPtr,&dbResult, &nRow, &nColumn, &gunionErrMsg);
		if (ret != SQLITE_OK)
		{
			if (ret == SQLITE_BUSY)
			{
				sqlite3_free(gunionErrMsg);
				usleep(10);
				continue;
			}
			UnionUserErrLog("in UnionSelectRealDBRecord2:: sqlite3_get_table errcode=[%d]!\n", ret);
			ret = UnionGetDBErrCode(ret);
			UnionCloseDatabase();
			return(ret);
		}
		break;
	}
	
	if (!callback)
	{
		if ((ret = UnionInitXMLPackage(NULL,NULL,0)) < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBRecord2:: UnionInitXMLPackage\n");
			goto exec_out;
		}
		snprintf(tmpBuf,sizeof(tmpBuf),"%d",nRow);
		if ((ret = UnionSetXMLPackageValue("totalNum",tmpBuf)) < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBRecord2:: UnionSetXMLPackageValue[%s][%s]\n","totalNum",tmpBuf);
			goto exec_out;
		}
	}
	
	index = nColumn;
	for( i = 0; i < nRow ; i++ )
	{
		if (!callback)
			UnionLocateNewXMLPackage("detail", i + 1);
		for( j = 0 ; j < nColumn; j++ )
		{
			if (!callback)
				UnionSetXMLPackageValue(dbResult[j], dbResult[index]);
			else
			{
				if ((ret = callback(pArg, nColumn, dbResult + index, dbResult)) < 0)
				{
					UnionUserErrLog("in UnionSelectRealDBRecord2:: callback ret = [%d]!\n",ret);
					goto exec_out;
				}
			}
			index++;
		}
	}	
	UnionLocateXMLPackage("",0);
	ret = nRow;
exec_out:	
	sqlite3_free_table(dbResult);
	return(ret);
}


/*
	currentPage和numOfPerPage大于0时，分页查询
*/
int UnionSelectRealDBRecord(char *sql,int currentPage,int numOfPerPage)
{
	return(UnionSelectRealDBRecord2(sql,currentPage,numOfPerPage,NULL,NULL));
}

int UnionSelectRealDBRecordCounts(char *tableName,char *joinCondition,char *condition)
{
	int     	ret = 0;
	char    	sql[1024];
	int 		len = 0;
	int		counts = 0;

	if (tableName == NULL)
	{
		UnionUserErrLog("in UnionSelectRealDBRecordCounts:: tableName is NULL!\n");
		return(errCodeParameter);
	}

	if ((ret = UnionGetDBIndexByTableName(tableName)) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecordCounts:: UnionGetDBIndexByTableName!\n");
		return(ret);
	}
	UnionSetDatabaseIndex(ret);

	if ((ret = UnionConnectDatabase()) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecordCounts:: UnionConnectDatabase!\n");
		return(ret);
	}

	len = snprintf(sql,sizeof(sql),"select count(1) as counts from %s",tableName);

	if ((joinCondition != NULL) && (strlen(joinCondition) > 0))
		len += snprintf(sql + len,sizeof(sql) - len," %s",joinCondition);

	if ((condition != NULL) && (strlen(condition) > 0))
		len += snprintf(sql + len,sizeof(sql) - len," where %s",condition);

	sql[len] = 0;

	if ((ret = UnionSelectRealDBRecord2(sql, 0, 0, get_one_integer_value,&counts)) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecordCounts:: UnionSelectRealDBRecord2  ret = %d\n", ret);
		return(ret);
	}
	UnionProgramerLog("in UnionSelectRealDBRecordCounts:: counts[%d]\n",counts);
	return(counts);
}

int UnionExecRealDBSql2(int syncFlag,char *sql)
{
	int	i;
	int	ret = 0;
	int	cnt = 1;
	int	len = 0;
	int	sqlNum = 0;
	//int	varLen = 0;
	char	sqlGrp[32][8192*2];
	char	tableName[128];
	char	msg[81920];

	UnionProgramerLog("in UnionExecRealDBSql2:: sql = [%s]\n",sql);

	if ((ret = UnionGetTableNameAndFieldNameFromSQL(sql,tableName,NULL)) < 0)
	{
		UnionUserErrLog("in UnionExecRealDBSql2:: UnionGetTableNameAndFieldNameFromSQL!\n");
		return(ret);
	}
	
	if ((ret = UnionGetDBIndexByTableName(tableName)) < 0)
	{
		UnionUserErrLog("in UnionExecRealDBSql2:: UnionGetDBIndexByTableName!\n");
		return(ret);
	}
	UnionSetDatabaseIndex(ret);

	if ((ret = UnionConnectDatabase()) < 0)
	{
		UnionLog("in UnionExecRealDBSql2:: UnionConnectDatabase!\n");
		return(ret);
	}

	if (syncFlag && UnionDataSyncIsWaitResult())
	{
		msg[0] = '0' + conSQL;
		msg[1] = '0' + conWaitResult;
		len = 2;
		len += snprintf(msg + len,sizeof(msg) - len,"%s",sql);
		if ((ret = UnionDataSyncSendToSocket(1,(unsigned char *)msg,len)) < 0)
		{
			if (strcasecmp(tableName,"sysUser") != 0)
			{
				UnionUserErrLog("in UnionExecRealDBSql2:: UnionDataSyncSendToSocket msg = [%s] !\n",msg);
				return(ret);
			}
		}
	}

	len = strlen(sql);
	if (sql[len-1] == ';')	// 匿名块，多条sql语句
	{
		strcpy(sqlGrp[0],"begin transaction");	// 开始一个事务
		sqlNum ++;
		if ((ret = UnionSeprateVarStrIntoArray(sql,len,';',(char *)&sqlGrp[1],30,8192*2)) < 0)
		{
			UnionUserErrLog("in UnionExecRealDBSql2:: UnionSeprateVarStrIntoArray sql = [%s] !\n",sql);
			return(ret);
		}
		
		sqlNum += ret;
		strcpy(sqlGrp[sqlNum],"commit transaction");	// 提交一个事务
		sqlNum ++;
	}
	else
	{
		sqlNum = 1;
		strcpy(sqlGrp[0],sql);
	}

	for (i = 0; i < sqlNum; i++)
	{
		while(1)
		{
			if ((ret = sqlite3_exec(gunionSQLite[UnionGetDatabaseIndex()], sqlGrp[i], NULL, NULL, &gunionErrMsg)) != SQLITE_OK)
			{
				if (ret == SQLITE_BUSY)
				{
					sqlite3_free(gunionErrMsg);
					usleep(10);
					continue;
				}
				UnionUserErrLog("in UnionExecRealDBSql2:: sql=[%s],errcode=[%d]!\n", sql, ret);
				ret = UnionGetDBErrCode(ret); 
				sqlite3_exec(gunionSQLite[UnionGetDatabaseIndex()], "rollback transaction", NULL, NULL, &gunionErrMsg);
				UnionCloseDatabase();
				return(ret);
			}
			if (sqlNum == 1)
			{
				cnt = sqlite3_changes(gunionSQLite[UnionGetDatabaseIndex()]);
				UnionProgramerLog("in UnionExecRealDBSql2:: cnt = [%d]\n", cnt);
			}
			break;
		}
	}

	if (syncFlag && !UnionDataSyncIsWaitResult())
	{
		if ((ret = UnionDataSyncSendMsg((unsigned char *)sql,strlen(sql),conSQL,conNotWaitResult)) < 0 )
		{
			UnionUserErrLog("in UnionExecRealDBSql2:: UnionDataSyncSendMsg sql = [%s] !\n",sql);
			return(ret);
		}
	}
		
	return(cnt);
}

int UnionExecRealDBSql(char *sql)
{
	return(UnionExecRealDBSql2(1,sql));
}

int UnionGetAddSelfNumBySequence(char *sequenceName)
{
	int	i;
	int	sqlNum = 4;
	char	sqlGrp[5][1024];
	struct timeval          now;
	long	seqno;

	strcpy(sqlGrp[0],"begin transaction");
	snprintf(sqlGrp[1],sizeof(sqlGrp[1]),"update %s set seq = seq + 1",sequenceName);
	snprintf(sqlGrp[2],sizeof(sqlGrp[2]),"select seq from %s",sequenceName);
	strcpy(sqlGrp[3],"commit transaction");
	strcpy(sqlGrp[4],"rollback transaction");

	for (i = 0; i < sqlNum; i++)
	{
	}

	gettimeofday(&now, NULL);
	seqno = now.tv_sec * 1000000;
	seqno += now.tv_usec;
	seqno = seqno % 0xFFFFFF;
	UnionLog("in UnionGetAddSelfNumBySequence:: seqno=[%ld]\n",seqno);

	return(seqno);

	/*
	if (sequence == 999999)
	{
		snprintf(sql,sizeof(sql),"update %s set seq = 1",sequenceName);	
		if ((ret =  UnionExecRealDBSql2(0,sql)) < 0)
		{
			UnionUserErrLog("in UnionGetAddSelfNumBySequence:: UnionExecRealDBSql2 ret = %d !\n", ret);
			return(ret);
		}
	}

	ret = errCodeObjectMDL_ObjectDefinitionNotExists;
	UnionProgramerLog("in UnionGetAddSelfNumBySequence:: not support!!!! ret = [%d]\n", ret);
	return(ret);
	*/
}

int UnionSelectRealDBTree(int returnSql,char *tableName,char *fieldName,char *parentFieldName,int fieldType,char *rootValue,char *buf,int sizeOfBuf)
{
	int	i;
	int	ret;
	int	num;
	int	len;
	char	sql[1024];
	char	tmpBuf[128];
	
	if (fieldType == 1)	// 字符串
		snprintf(tmpBuf,sizeof(tmpBuf),"'%s'",rootValue);
	else
		snprintf(tmpBuf,sizeof(tmpBuf),"%s",rootValue);
	
	snprintf(sql,sizeof(sql),"with tmp(%s) as"
		" (values (%s) union"
		" select %s.%s from %s,tmp"
		" where %s.%s=tmp.%s)"
		" select %s from %s where %s.%s in tmp",
		fieldName,tmpBuf,tableName,fieldName,tableName,tableName,parentFieldName,fieldName,fieldName,tableName,tableName,fieldName);

	if (returnSql)
	{
		ret = snprintf(buf,sizeOfBuf,"%s",sql);
		return(ret);
	}

	if ((num = UnionSelectRealDBRecord(sql,0,0)) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBTree:: UnionSelectRealDBRecord,sql = [%s] ret = [%d] !\n",sql,num);
		return(num);
	}
	else if (num == 0)
	{
		buf[0] = 0;
		return(0);
	}
	
	len = 0;
	for (i = 1; i <= num; i++)
	{
		if ((ret = UnionLocateXMLPackage("detail",i)) < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBTree:: UnionLocateXMLPackage[%s][%d]!\n","detail",i);
			return(ret);
		}
		if ((ret = UnionReadXMLPackageValue(fieldName,tmpBuf,sizeof(tmpBuf))) < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBTree:: UnionReadXMLPackageValue[%s][%d]!\n",fieldName,i);
			return(ret);
		}
		if (fieldType == 1)	// 字符串
		{
			if (i < num)
				len += snprintf(buf + len,sizeOfBuf - len,"'%s',",tmpBuf);
			else
				len += snprintf(buf + len,sizeOfBuf - len,"'%s'",tmpBuf);
		}
		else
		{
			if (i < num)
				len += snprintf(buf + len,sizeOfBuf - len,"%s,",tmpBuf);
			else
				len += snprintf(buf + len,sizeOfBuf - len,"%s",tmpBuf);
		}
	}
	return(len);
}

int UnionDeleteRealDBTree(char *tableName,char *fieldName,char *parentFieldName,int fieldType,char *rootValue)
{
	int	ret;
	char	sql[10240];
	char	condition[8192];
	
	if ((ret = UnionSelectRealDBTree(0,tableName,fieldName,parentFieldName,fieldType,rootValue,condition,sizeof(condition))) < 0)
	{
		UnionUserErrLog("in UnionDeleteRealDBTree:: UnionSelectRealDBTree!\n");
		return(ret);
	}

	snprintf(sql,sizeof(sql),"delete from %s where %s in (%s)",
		tableName,fieldName,condition);
	
	if ((ret = UnionExecRealDBSql(sql)) < 0)
	{
		UnionUserErrLog("in UnionDeleteRealDBTree:: UnionExecRealDBSql!\n");
		return(ret);
	}
	return(ret);
}

