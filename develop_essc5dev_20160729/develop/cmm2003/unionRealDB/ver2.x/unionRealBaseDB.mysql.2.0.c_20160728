/*
Author: modified by lics
Date: 2014.3.18
 */
 
#ifndef _realBaseDB_2_x_
#define _realBaseDB_2_x_
#endif

#ifndef _UnionLogMDL_3_x_
#define _UnionLogMDL_3_x_
#endif

#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>

#include "UnionLog.h"
#include "UnionStr.h"
#include "unionErrCode.h"

#include "unionRealBaseDB.h"

#include "unionREC.h"
#include "unionRealDBCommon.h"
#include "unionXMLPackage.h"

#include <mysql.h>
#include <errmsg.h>

MYSQL	gunionMysql;
MYSQL	*gunionSock = NULL;
int	g_sqlcode = 0;

int get_one_integer_value(void *arg ,int nCount,char** pValue,char** pName)
{
	int	*iCnt = (int *)arg;
	if (nCount > 1)
	{
		UnionUserErrLog("in get_one_integer_value:: nCount[%d] > 1\n",nCount);
		return(errCodeDatabaseMDL_MoreRecordFound);
	}
	*iCnt = atoi(pValue[0]);
	return(*iCnt);
}

// 取值数据库错误码，并设置日志的错误码
int UnionGetDBErrCode()
{
	int	ret = 0;
	
	g_sqlcode = mysql_errno(&gunionMysql);
	ret = 0 - abs(g_sqlcode);
	if(ret < 0)
	{
		UnionUserErrLog("in UnionGetDBErrCode:: dbsqlcode = [%d] errstr = [%s]\n", g_sqlcode, mysql_error(&gunionMysql));
		UnionSetResponseRemark((char *)mysql_error(&gunionMysql));
		ret += errCodeOffsetOfMysql;		
		return(UnionSetUserDefinedErrorCode(ret));
	}
	else
		return(0);
}

// 是否是数据致命错误(需要重连数据库的错误，在unionREC表中配置)
int UnionIsFatalDBErrCode(int dbErrCode)
{
	char	varName[32];

	memset(varName, 0, sizeof varName);

	sprintf(varName, "fatalMYSQLDBErr%d", abs(dbErrCode));
	if (UnionReadIntTypeRECVar(varName) > 0)
	{
		return(1);
	}

	return 0;
}

int UnionConnectDB()
{
	int		ret;
	char		szDBHostAddr[64];
	int		dbHostPort = 0;

	char		dbUser[64];
	char		dbPasswd[64];
	char		dbName[64];
	char		*ptr = NULL;
        
        UnionInitDatabaseConfig();	

	if ((ptr = getenv("DBHOSTADDR")) == NULL )
		strcpy(szDBHostAddr, "localhost");
	else
		strcpy(szDBHostAddr, ptr);
	
	if ((ptr = getenv("DBHOSTPORT")) == NULL )
		dbHostPort = 0;
	else
		dbHostPort = atoi(ptr);
	
	memset(dbUser, 0, sizeof(dbUser));
	memset(dbPasswd, 0, sizeof(dbPasswd));
	memset(dbName, 0, sizeof(dbName));

	UnionGetDBUSER(dbUser);
	UnionGetDBPASSWD(dbPasswd);
	UnionGetDBNAME(dbName);

	//add by leipp 20151201 db timeout open
        UnionSetIdleDBTime(-1);

	mysql_init((MYSQL *)&gunionMysql);

	if(strlen(dbUser) == 0 || strlen(dbPasswd) == 0 || strlen(dbName) == 0)
	{
		UnionUserErrLog("in UnionConnectDB:: dbName = [%s] dbUser = [%s] dbPasswd_len = [%zu] !!!\n", dbName, dbUser, strlen(dbPasswd));
		return(UnionSetUserDefinedErrorCode(errCodeParameter));
	}

	if(!(gunionSock = mysql_real_connect(&gunionMysql, szDBHostAddr, dbUser, dbPasswd, dbName, dbHostPort, NULL, 0)))
	{
		ret = UnionGetDBErrCode();
		UnionUserErrLog("in UnionConnectDB:: failure sqlCode = [%d] szDBHostAddr = [%s] dbName = [%s] dbUser = [%s] dbPasswd_len = [%zu] dbHostPort = [%d] \n", g_sqlcode, szDBHostAddr, dbName, dbUser, strlen(dbPasswd),dbHostPort);
		return(ret);
	}
	// 关闭自动提交
	//mysql_autocommit(&gunionMysql,0);
	UnionLog("in UnionConnectDB:: connect OK!\n");

	//add by leipp 20151201 db timeout close
        UnionCloseIdleDBAlrm();

	return(0);
}

int UnionCloseDB()
{
	int	ret;

	//add by linxj 20150922 db timeout open
        UnionSetIdleDBTime(-1);

	if(mysql_rollback(gunionSock))
	{
		ret = UnionGetDBErrCode();
		UnionUserErrLog("in UnionCloseDB:: mysql_rollback mysql_error = [%d]\n", ret);
	}

	mysql_close(gunionSock);
	gunionSock = NULL;
	mysql_library_end();

	UnionLog("in UnionCloseDB:: close DB OK!\n");

	//add by linxj 20150922 db timeout close
        UnionCloseIdleDBAlrm();

	return(0);
}


/*
	currentPage和numOfPerPage大于0时，分页查询
*/
int UnionSelectRealDBRecord2(char *sql,int currentPage,int numOfPerPage,select_callback callback,void *pArg)
{
	char    tmpBuf[32];
	int	ret;
	MYSQL_RES *res = NULL;
	MYSQL_ROW row = NULL;
	MYSQL_FIELD *mySqlField = NULL;
	unsigned int i = 0;
	unsigned int colNum = 0;

	char	dbSql[8192*2];
	char	*sqlPtr = NULL;
	int	iRecCnt = 0;
	int	callbackIsInit = 0;
	int	nameLength = 0;
	int	fieldLen = 0;
	int	reconnectTimes = 0;
	char	**azCols = 0;	
	char	**azVals = 0;


	if (sql == NULL)
	{
		UnionUserErrLog("in UnionSelectRealDBRecord2:: sql is null\n");
		return(errCodeParameter);
	}

onceAgain:
	if ((ret = UnionConnectDatabase()) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecord2:: UnionConnectDatabase!\n");
		return(ret);
	}

	//add by linxj 20150922 db timeout open
        UnionSetIdleDBTime(-1);
	
	if ((currentPage <= 0) || (numOfPerPage <= 0))
		sqlPtr = sql;
	else
	{
		snprintf(dbSql,sizeof(dbSql),"%s limit %d,%d",sql,(currentPage - 1) * numOfPerPage,numOfPerPage);
		sqlPtr = dbSql;
	}

	UnionProgramerLog("in UnionSelectRealDBRecord2:: sql = [%s]!\n",sqlPtr);

	if( mysql_query(gunionSock, sqlPtr) )
	{
		ret = UnionGetDBErrCode();
		UnionCloseDatabase();
		if (!reconnectTimes)
		{
			reconnectTimes ++;
			goto onceAgain;
		}
		else
		{
			UnionUserErrLog("in UnionSelectRealDBRecord2:: mysql_query dbSql=[%s],errcode=[%d]!\n", sqlPtr, g_sqlcode);
			return(ret);
		}
	}
	colNum = mysql_field_count(gunionSock);

	if (!callback)
	{
		if ((ret = UnionInitXMLPackage(NULL,NULL,0)) < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBRecord2:: UnionInitXMLPackage\n");
			goto exec_out;
		}
		
		if ((ret = UnionSetXMLPackageValue("totalNum","0")) < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBRecord2:: UnionSetXMLPackageValue[%s][%s]\n","totalNum","0");
			goto exec_out;
		}
	}
	else
	{
		callbackIsInit = 0;
		azCols = (char **)calloc(1,(2 * colNum * sizeof(const char*) + 1));
	}
		
	if ((res = mysql_store_result(gunionSock)) == NULL)
	{
		ret = UnionGetDBErrCode();
		UnionCloseDatabase();
		if (!reconnectTimes)
		{
			reconnectTimes ++;
			goto onceAgain;
		}
		else
		{
			UnionUserErrLog("in UnionSelectRealDBRecord2:: mysql_store_result error, errcode=[%d]!\n", g_sqlcode);
			return(ret);
		}		
	}

	iRecCnt = 0;	
	while( (row = mysql_fetch_row(res)) )
	{
		iRecCnt ++;
		if (!callback)
			UnionLocateNewXMLPackage("detail",iRecCnt);

		for( i = 0; i < colNum; i++ )
		{
			mySqlField = mysql_fetch_field_direct(res, i);
			
			if (callback)
			{
				UnionFilterHeadAndTailBlank(row[i]);
				nameLength = strlen(mySqlField->name);
				if( row[i] )
					fieldLen = strlen(row[i]);
				else
					fieldLen = 0;
				if (!callbackIsInit)
				{
					azCols[i] = (char *)malloc(nameLength + 1);
					azCols[colNum + i] = (char *)malloc(fieldLen + 1);
					strcpy(azCols[i],mySqlField->name);
				}
				azVals = &azCols[colNum];
				if( row[i] )
					strcpy(azVals[i],row[i]);
			}
			else
			{
				if( row[i] )
				{
					UnionFilterHeadAndTailBlank(row[i]);
					UnionSetXMLPackageValue(mySqlField->name,row[i]);
				}
				else
				{
					UnionSetXMLPackageValue(mySqlField->name,"");
				}
			}
		}
		
		if (callback)
		{
			callbackIsInit = 1;
			if ((ret = callback(pArg, colNum, azVals, azCols)) < 0)
			{
				UnionUserErrLog("in UnionSelectRealDBRecord2:: callback ret = [%d]!\n",ret);
				goto exec_out;
			}
		}
	}
 
 	if (!callback)
 	{
		ret = iRecCnt;
		snprintf(tmpBuf,sizeof(tmpBuf),"%d",iRecCnt);
		UnionLocateXMLPackage("",0);
		UnionSetXMLPackageValue("totalNum",tmpBuf);
	}
	
exec_out:	
	if (callback)
	{
		for (i = 0; i < 2*colNum; i++)
		{
			if (azCols[i])
				free(azCols[i]);
		}
		free(azCols);
	}
	if (res)
		mysql_free_result(res);

	//add by linxj 20150922 db timeout close
        UnionCloseIdleDBAlrm();

	return(ret);
}

int UnionSelectRealDBRecord(char *sql,int currentPage,int numOfPerPage)
{
	int	ret = 0;


	ret = UnionSelectRealDBRecord2(sql,currentPage,numOfPerPage,NULL,NULL);

	
	return(ret);
}

int UnionSelectRealDBRecordCounts(char *tableName,char *joinCondition,char *condition)
{
	int	ret;
	MYSQL_RES *res = NULL;
	MYSQL_ROW row = NULL;
	int	count = 0;
	char	sql[8192];
	int	len = 0;
	int	reconnectTimes = 0;

onceAgain:
	if ((ret = UnionConnectDatabase()) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecordCounts:: UnionConnectDatabase!\n");
		return(ret);
	}
	
	len = sprintf(sql,"select count(1) from %s",tableName);
	if ((joinCondition != NULL) && (strlen(joinCondition) > 0))
		len += snprintf(sql + len, sizeof(sql) - len," %s",joinCondition);
		
	if ((condition != NULL) && (strlen(condition) > 0))
		len += snprintf(sql + len, sizeof(sql) - len," where %s",condition);
	UnionProgramerLog("in UnionSelectRealDBRecordCounts:: sql=[%s]\n",sql);

	if( mysql_query(gunionSock, sql) )
	{
		ret = UnionGetDBErrCode();
		UnionCloseDatabase();
		if (!reconnectTimes)
		{
			reconnectTimes ++;
			goto onceAgain;
		}
		else
		{
			UnionUserErrLog("in UnionSelectRealDBRecordCounts:: mysql_query sql=[%s], errcode=[%d]!\n", sql, g_sqlcode);
			return(ret);
		}
	}
	if( !(res = mysql_store_result(gunionSock)) )
	{
		UnionUserErrLog("in UnionSelectRealDBRecordCounts:: mysql_store_result error, errcode=[%d]!\n", g_sqlcode);
		ret = UnionGetDBErrCode(); 
		UnionCloseDatabase();
		return(ret);
	}
	if( !(row = mysql_fetch_row(res)) )
	{
		ret = UnionGetDBErrCode(); 
		UnionCloseDatabase();
		if (!reconnectTimes)
		{
			reconnectTimes ++;
			goto onceAgain;
		}
		else
		{
			UnionUserErrLog("in UnionSelectRealDBRecordCounts:: mysql_fetch_row error, errcode=[%d]!\n", g_sqlcode);
			return(ret);
		}
	}
	if( row[0] )
		count = atoi(row[0]);
	else
		count = 0;
	mysql_free_result(res);
	return(count);
}

int UnionExecRealDBSql2(int syncFlag,char *sql)
{
	int	i;
	int	ret = 0;
	int	cnt = 1;
	int	len = 0;
	int	sqlNum = 0;
	//int	varLen = 0;
	int	reconnectTimes = 0;
	char	sqlGrp[32][8192*2];

onceAgain:	
	if ((ret = UnionConnectDatabase()) < 0)
	{
		UnionLog("in UnionExecRealDBSql2:: UnionConnectDatabase!\n");
		return(ret);
	}

	//add by linxj 20150922 db timeout open
        UnionSetIdleDBTime(-1);

	len = strlen(sql);
	if (sql[len-1] == ';')	// 匿名块，多条sql语句
	{
		strcpy(sqlGrp[0],"start transaction");	// 开始一个事务
		sqlNum ++;
		if ((ret = UnionSeprateVarStrIntoArray(sql,len,';',(char *)&sqlGrp[1],30,8192*2)) < 0)
		{
			UnionUserErrLog("in UnionExecRealDBSql2:: UnionSeprateVarStrIntoArray sql = [%s] !\n",sql);
			return(ret);
		}
		sqlNum += ret;
		strcpy(sqlGrp[sqlNum],"commit");	// 提交一个事务
		sqlNum ++;
	}
	else
	{
		sqlNum = 1;
		strcpy(sqlGrp[0],sql);
	}

	for (i = 0; i < sqlNum; i++)
	{
		if( mysql_query(gunionSock, sqlGrp[i]) )
		{
			ret = UnionGetDBErrCode();
			UnionCloseDatabase();
			if (!reconnectTimes)
			{
				reconnectTimes ++;
				goto onceAgain;
			}
			else
			{
				UnionUserErrLog("in UnionExecRealDBSql2:: sql=[%s],errcode=[%d]!\n", sqlGrp[i], g_sqlcode);
				return(ret);
			}
		}
		if (sqlNum == 1) 
		{
			cnt = (int)mysql_affected_rows(gunionSock);
			UnionProgramerLog("in UnionExecRealDBSql2:: cnt = [%d]\n", cnt);
		}
	}
	
	//add by linxj 20150922 db timeout close
        UnionCloseIdleDBAlrm();

	return(cnt);
}

int UnionExecRealDBSql(char *sql)
{
	int	ret = 0;


	ret = UnionExecRealDBSql2(1,sql);
	

	return(ret);
}

int UnionGetAddSelfNumBySequence(char *sequenceName)
{	
	int	ret;
	int	sequence = 0;
	char	sql[1024];
	
	if ((ret = UnionConnectDatabase()) < 0)
	{
		UnionUserErrLog("in UnionGetAddSelfNumBySequence:: UnionConnectDatabase!\n");
		return(ret);
	}

	snprintf(sql,sizeof(sql),"update %s set seq = last_insert_id(seq + 1)",sequenceName);
	if ((ret = UnionExecRealDBSql2(0,sql)) < 0)
	{
		UnionUserErrLog("in UnionGetAddSelfNumBySequence:: UnionExecRealDBSql2! sql = [%s] ret = [%d]!\n",sql,ret);
		return(ret);
	}
		
	snprintf(sql,sizeof(sql),"select last_insert_id() as sequence");
	if ((ret = UnionSelectRealDBRecord2(sql, 0, 0, get_one_integer_value,&sequence)) < 0)
	{
		UnionUserErrLog("in UnionGetAddSelfNumBySequence:: UnionSelectRealDBRecord2! sql = [%s] ret = [%d]!\n",sql,ret);
		return(ret);
	}
	if (sequence == 999999)
	{
		snprintf(sql,sizeof(sql),"update %s set seq = 1",sequenceName);	
		if ((ret =  UnionExecRealDBSql2(0,sql)) < 0)
		{
			UnionUserErrLog("in UnionGetAddSelfNumBySequence:: UnionExecRealDBSql2 ret = %d !\n", ret);
			return(ret);
		}
	}
	return(sequence);
}

int UnionSelectRealDBTree(int returnSql,char *tableName,char *fieldName,char *parentFieldName,int fieldType,char *rootValue,char *buf,int sizeOfBuf)
{
	int	i;
	int	ret;
	int	num;
	int	len;
	char	sql[1024];
	char	tmpBuf[128];
	char	funName[128];
	
	if (fieldType == 1)	// 字符串
		snprintf(tmpBuf,sizeof(tmpBuf),"'%s'",rootValue);
	else
		snprintf(tmpBuf,sizeof(tmpBuf),"%s",rootValue);
	
	if (strcasecmp(tableName,"sysMenu") == 0)
		snprintf(funName,sizeof(funName),"%s","getChildList");
	else if (strcasecmp(tableName,"organization") == 0)
		snprintf(funName,sizeof(funName),"%s","getLowerOrganization");
	else
		snprintf(funName,sizeof(funName),"%s_%s","get_child",tableName);
	
	snprintf(sql,sizeof(sql),"select %s from %s where FIND_IN_SET(%s,%s(%s))",
		fieldName,tableName,fieldName,funName,tmpBuf);

	if (returnSql)
	{
		ret = snprintf(buf,sizeOfBuf,"%s",sql);
		return(ret);
	}

	if ((num = UnionSelectRealDBRecord(sql,0,0)) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBTree:: UnionSelectRealDBRecord,sql = [%s] ret = [%d] !\n",sql,num);
		return(num);
	}
	else if (num == 0)
	{
		buf[0] = 0;
		return(0);
	}
	
	len = 0;
	for (i = 1; i <= num; i++)
	{
		if ((ret = UnionLocateXMLPackage("detail",i)) < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBTree:: UnionLocateXMLPackage[%s][%d]!\n","detail",i);
			return(ret);
		}
		if ((ret = UnionReadXMLPackageValue(fieldName,tmpBuf,sizeof(tmpBuf))) < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBTree:: UnionReadXMLPackageValue[%s][%d]!\n",fieldName,i);
			return(ret);
		}
		if (fieldType == 1)	// 字符串
		{
			if (i < num)
				len += snprintf(buf + len,sizeOfBuf - len,"'%s',",tmpBuf);
			else
				len += snprintf(buf + len,sizeOfBuf - len,"'%s'",tmpBuf);
		}
		else
		{
			if (i < num)
				len += snprintf(buf + len,sizeOfBuf - len,"%s,",tmpBuf);
			else
				len += snprintf(buf + len,sizeOfBuf - len,"%s",tmpBuf);
		}
	}
	return(len);
}

int UnionDeleteRealDBTree(char *tableName,char *fieldName,char *parentFieldName,int fieldType,char *rootValue)
{
	int	ret;
	char	sql[10240];
	char	condition[8192];
	
	if ((ret = UnionSelectRealDBTree(1,tableName,fieldName,parentFieldName,fieldType,rootValue,condition,sizeof(condition))) < 0)
	{
		UnionUserErrLog("in UnionDeleteRealDBTree:: UnionSelectRealDBTree!\n");
		return(ret);
	}

	snprintf(sql,sizeof(sql),"delete from %s where %s in (%s)",
		tableName,fieldName,condition);
	
	if ((ret = UnionExecRealDBSql(sql)) < 0)
	{
		UnionUserErrLog("in UnionDeleteRealDBTree:: UnionExecRealDBSql!\n");
		return(ret);
	}
	return(ret);
}
