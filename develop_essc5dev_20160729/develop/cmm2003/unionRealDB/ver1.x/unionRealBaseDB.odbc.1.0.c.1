#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <unistd.h>
#include <assert.h>

#define _UnionLogMDL_3_x_ 

#include "sql.h"       
#include "sqlext.h"   
#include "sqltypes.h"
#include "sqlucode.h"

#include "UnionLog.h"
#include "unionErrCode.h"
#include "UnionStr.h"

#include "unionRealBaseDB.h"
#include "unionComplexDBObjectDef.h"
#include "unionTblDef.h"
#include "unionREC.h"
#include "unionTableDef.h"

#define errCodeRecordNotFound		(errCodeOffsetOfDatabase-100)	//记录不存在
#define errCodeSQLExec			(errCodeOffsetOfDatabase-101)	//sql执行出错
#define errCodeRecordAlreadyExist	(errCodeOffsetOfDatabase-102)	//数据已经存在(关键字段数据重复)
#define errCodeConnectFailed		(errCodeOffsetOfDatabase-103)	//数据库连接失

#define MAX_UNIONDB_COL_NUM     64

typedef union
{
	void			*pValue;
	int                     *intValue;              // 整型字段值	
	char                    *strValue;              // 串型字段值
}TUnionFieldValuePtr;

// 字段定义
typedef struct
{
	char                    tag[40+1];		// 字段名称
	int			type;			// 字段类型
	int			len;			
	TUnionFieldValuePtr	value;
} TUnionDBField;

typedef TUnionDBField	*PUnionDBField;

// 记录定义
typedef struct
{
	int			colNum;
	TUnionDBField		field[MAX_UNIONDB_COL_NUM];
} TUnionDBRecord;
typedef TUnionDBRecord   *PUnionDBRecord;


int UnionFormTablePrimaryKeyList(char *tableName, char *primaryKeyList);
int UnionGetDBUSER(char *dbuser);
int UnionGetDBPASSWD(char *dbpasswd);
int UnionGetDBNAME(char *dbname);
int UnionConvertDB2ErrCodeIntoEsscErrCode(int sqlcode);
int UnionConvertObjectFldName(PUnionTableDef pobject,char *oriFldName,char *defName);
int UnionGetTableSelectFieldFromImage(char *tableName, char *tableFileList);
int UnionInitDatabaseConfig();
int UnionConnectDB();

static int UnionCheckDB2STMTError(char *msg);
static int UnionFreeStmtHandle();
static int UnionExecDQLStatement(const char* sql, int selectRecNum, char* recBuf, int sizeofBuf, const char* fileName);
static int UnionCheckDB2DBCError(char *msg);
int UnionExecDMLStatement(const char* sql);
static int UnionCloseDBBySpecErrCode(int dbErrCode);
static int UnionIsConnectDBOK();
static int UnionLogonDB(const char* unionDBname, const char* unionDBUserName, const char* unionDBPasswd);

static int				s_unionDatabaseConnected = 0;
static int			        s_unionPidConnectToDB = -1;

static SQLHANDLE		g_stmt_handle = SQL_NULL_HSTMT;
static SQLHANDLE		g_conn_handle = SQL_NULL_HDBC;
static SQLHANDLE		g_env_handle = SQL_NULL_HENV;

static SQLRETURN		g_sqlret = 0;

static TUnionDBRecord		gunionDBRecord;

static PUnionTableDef           gunionCurrentObject = NULL;

int UnionGetDBErrCode()
{
	int                     ret;

	//ret = 0 - abs(sqlca.sqlcode);

	// 设计数据库错误码偏移
	// ret = ret + oracleErrCodeOffset .......

	return(UnionSetUserDefinedErrorCode(ret));
}

int UnionIsFatalDBErrCode(int dbErrCode)
{
	//int     ret;
	char    varName[100];

	memset(varName, 0, sizeof varName);

	sprintf(varName, "fatalODBCErr%d", abs(dbErrCode));
	if (UnionReadIntTypeRECVar(varName) > 0)
	{
		return(1);
	}
        
	return 0;
}       

int UnionInitDBRecordSpace()
{
	int			i;

	gunionDBRecord.colNum = 0;

	for(i = 0; i < MAX_UNIONDB_COL_NUM; i++)
	{
		memset(gunionDBRecord.field[i].tag, 0, sizeof(gunionDBRecord.field[i].tag));
		gunionDBRecord.field[i].value.pValue = NULL;
	}

	UnionAuditLog("in UnionInitDBRecordSpace:: OK!\n");

	return(0);
}

//为结果集绑定缓冲区
int UnionAllocSpaceAndSpecToField(int index, int type, int size)
{
	SQLINTEGER			bufSize;
	SQLINTEGER			IndLen;

	char				tmpBuf[32];
	SQLSMALLINT			fldType;

	bufSize = size + 1;
	(gunionDBRecord.field[index]).len = bufSize;
	(gunionDBRecord.field[index]).type = type;
	(gunionDBRecord.field[index]).value.pValue = malloc(bufSize);
	memset((gunionDBRecord.field[index]).value.pValue, 0, bufSize);

	fldType = type;

	if(fldType == SQL_VARCHAR)
	{
		fldType = SQL_CHAR;
	}
	else if(fldType == SQL_DECIMAL || fldType == SQL_C_NUMERIC)
	{
		fldType = SQL_C_LONG;
	}

	g_sqlret = SQLBindCol(g_stmt_handle,			// hstmt
			(SQLUSMALLINT)(index + 1),		// icol
			(SQLSMALLINT)fldType,			// fCType
			(SQLPOINTER)(gunionDBRecord.field[index].value.pValue),	// rgbValue
			(SQLINTEGER)bufSize,			// dbValueMax
			(SQLLEN*)&IndLen);			// pcbValue

	sprintf(tmpBuf, "SQLBindCol index = %d type = %d size = %d", index, fldType, size);

	UnionCheckDB2STMTError(tmpBuf);
	return(bufSize);
}

int UnionClearDBRecordSpace()
{
	int			i;

	for(i = 0; i <gunionDBRecord.colNum; i++)
	{
		memset((gunionDBRecord.field[i]).value.pValue, 0, (gunionDBRecord.field[i]).len);
	}

	return(0);
}

int UnionFreeDBRecordSpace()
{
	int			i;

	gunionDBRecord.colNum = 0;

	for(i = 0; i < MAX_UNIONDB_COL_NUM; i++)
	{
		memset(gunionDBRecord.field[i].tag, 0, sizeof(gunionDBRecord.field[i].tag));
		if(gunionDBRecord.field[i].value.pValue != NULL)
		{
			//UnionProgramerLog("in UnionFreeDBRecordSpace:: free ptr = %x\n", (gunionDBRecord.field[i]).value.pValue);
			free(gunionDBRecord.field[i].value.pValue);
			gunionDBRecord.field[i].value.pValue = NULL;
		}
	}

	return(0);
}

// 初始化句柄
int UnionInitAllocHandle()
{
	int			ret;

	if ((g_sqlret = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &g_env_handle))!= SQL_SUCCESS)
	{
		ret = UnionSetUserDefinedErrorCode(abs(g_sqlret) * -1);
		UnionUserErrLog("in UnionInitAllocHandle:: Can't alloc envirenment handle!\n");
		return(ret);
	}
	
	g_sqlret = SQLSetEnvAttr(g_env_handle, SQL_ATTR_ODBC_VERSION, (void*)SQL_OV_ODBC3, 0);
	
        if ((g_sqlret = SQLAllocHandle(SQL_HANDLE_DBC, g_env_handle, &g_conn_handle)) != SQL_SUCCESS)
        {
		ret = UnionSetUserDefinedErrorCode(abs(g_sqlret) * -1);
        	SQLFreeHandle(SQL_HANDLE_ENV, g_env_handle);
        	UnionUserErrLog("in UnionInitAllocHandle:: Can't alloc ODBC handle!\n");
		return(ret);
        }

        return(0);
}

// 释放句柄
int UnionFreeAllocHandle()
{
	if (g_conn_handle != SQL_NULL_HDBC)
	{
		SQLFreeHandle(SQL_HANDLE_DBC,g_conn_handle);
	}

	if(g_env_handle != SQL_NULL_HENV)
	{
		SQLFreeHandle(SQL_HANDLE_ENV,g_env_handle);
	}

	g_conn_handle = SQL_NULL_HDBC;
	g_env_handle = SQL_NULL_HENV;

	return(0);
}

int UnionCreateStmtHandle()
{
	int			ret = 0;

	if (g_stmt_handle != SQL_NULL_HSTMT) 
	{
		UnionFreeStmtHandle();
	}

	if ((g_sqlret = SQLAllocStmt(g_conn_handle, &g_stmt_handle)) != SQL_SUCCESS)
	{
		ret = UnionCheckDB2DBCError("SQLAllocStmt");
		UnionUserErrLog("in UnionCreateStmtHandle:: can't alloc stmt handle! g_sqlret=[%d].\n", g_sqlret);
		return(ret);
	}

	return(ret);
}

int UnionFreeStmtHandle()
{
	if (SQL_NULL_HSTMT == g_stmt_handle)
		return 0;
	SQLSetStmtAttr(g_stmt_handle,SQL_ATTR_QUERY_TIMEOUT,(SQLPOINTER)-1,0);
	SQLFreeStmt(g_stmt_handle,SQL_DROP);
	g_stmt_handle = SQL_NULL_HSTMT;
	return 0;
}

int UnionLogonDB(const char* unionDBname, const char* unionDBUserName, const char* unionDBPasswd)
{
	int			ret;

	// 初始化句柄
	UnionInitAllocHandle();

	// 设计数据库连接超时
	SQLSetConnectAttr(g_conn_handle, SQL_LOGIN_TIMEOUT, (SQLPOINTER)1, 0);

	// 只根据dbname连接数据库,db2..
	if (unionDBUserName == NULL || strlen(unionDBUserName) == 0 || unionDBPasswd == NULL || strlen(unionDBPasswd) == 0)
	{
		g_sqlret = SQLConnect(g_conn_handle, (SQLCHAR *)unionDBname, SQL_NTS, (SQLCHAR*)"", 0, (SQLCHAR*)"", 0);

		if(g_sqlret != SQL_SUCCESS)
		{
			ret = UnionCheckDB2DBCError("SQLConnect");
			UnionUserErrLog("in UnionLogonDB:: Connect to Database [%s] fail! ret = [%d]\n", unionDBname, ret);
			UnionFreeAllocHandle();
			return(ret);
			
		}
	}
	// 只根据dbuser和dbpasswd连接数据库,oracle...
	else if(unionDBname == NULL || strlen(unionDBname) == 0)
	{
		g_sqlret = SQLConnect(g_conn_handle, (SQLCHAR *)"", 0, (SQLCHAR *)unionDBUserName, SQL_NTS, (SQLCHAR *)unionDBPasswd, SQL_NTS);


		if(g_sqlret != SQL_SUCCESS)
		{
			ret = UnionCheckDB2DBCError("SQLConnect");
			UnionUserErrLog("in UnionLogonDB:: Connect to user [%s] passwd_len = [%d] fail! ret = [%d].\n", unionDBUserName, strlen(unionDBPasswd), ret);
			UnionFreeAllocHandle();
			return(ret);
		}
	}
	else // dbuser/dbpasswd@dbname
	{
		g_sqlret = SQLConnect(g_conn_handle, (SQLCHAR *)unionDBname,SQL_NTS, (SQLCHAR *)unionDBUserName, SQL_NTS, (SQLCHAR *)unionDBPasswd, SQL_NTS);


		if(g_sqlret != SQL_SUCCESS)
		{
			ret = UnionCheckDB2DBCError("SQLConnect");
			UnionUserErrLog("in UnionLogonDB:: Connect to Database [%s] user [%s] passwd_len = [%d] fail! ret = [%d].\n", unionDBname, unionDBUserName, strlen(unionDBPasswd), ret);
			UnionFreeAllocHandle();
			return(ret);
		}
	}

	return(0);
}

int UnionLogoffDB()
{
        SQLDisconnect(g_conn_handle);
	UnionFreeAllocHandle();
	UnionLog("in UnionLogoffDB:: OCILogon OK!\n");
	return(0);
}

int UnionConnectDBWithTimeOut(int timeout)
{
	int				     ret;
	int				     seconds;

	ret		     =	       0;
	seconds		     =	       0;

	if ((ret = UnionInitDatabaseConfig()) < 0)
	{
		return(ret);
	}

	if (UnionIsConnectDBOK() == 1)
	{
		return (ret);	
	}
	
	while((UnionIsConnectDBOK() != 1))
	{
		if ((timeout >= 0) && (seconds < timeout))
		{
			seconds++;
			sleep(1);
		}
		else if ((timeout >= 0) && (seconds >= timeout))
		{
			ret = -1;
			break;
		}
		else
		{
			return -1;
		}
		UnionConnectDB();
	}

	return(ret);
}

int UnionConnectDB()
{
	int	ret;

	char	DBUserName[64];
	char	DBPasswd[64];
	char	DBname[64];
	
	memset(DBUserName, 0, sizeof(DBUserName));
	memset(DBPasswd, 0, sizeof(DBPasswd));
	memset(DBname, 0, sizeof(DBname));


	if (UnionIsConnectDBOK() == 1)
		return(0);

	if ((ret = UnionInitDatabaseConfig()) < 0)
		return(ret);

	UnionGetDBUSER(DBUserName);
	UnionGetDBPASSWD(DBPasswd);
	UnionGetDBNAME(DBname);

	ret = UnionLogonDB(DBname, DBUserName, DBPasswd);

	if (ret < 0)
	{
		UnionUserErrLog("in UnionConnectDB:: unionDBname = [%s] unionDBUserName = [%s] unionDBPasswd_len = [%d]\n",DBname, DBUserName, strlen(DBPasswd));
		return(ret);
	}
	
	s_unionPidConnectToDB = getpid();
	s_unionDatabaseConnected = 1;

	UnionLog("in UnionConnectDB:: unionDBname = [%s] unionDBUserName = [%s] unionDBPasswd_len = [%d] connect db OK!\n",DBname, DBUserName, strlen(DBPasswd));

	return(0);
}

int UnionConnectBackupDatabase()
{
	return(0);
}

int UnionCloseDB()
{
	if(UnionIsConnectDBOK() != 1)
	{
		return(0);
	}

	UnionLogoffDB();

	s_unionDatabaseConnected = 0;
	s_unionPidConnectToDB = -1;

	UnionLog("in UnionCloseDB:: close DB OK!\n");
	
	return(0);
}


int UnionCloseBackupDatabase()
{
	return(0);
}


int UnionOpenRealDBSql(char *sql, char *record, int sizeOfRecord)
{

	int			ret, i, j;

	SQLSMALLINT 		colNum = 0;

	SQLSMALLINT		nameLength;				// pcbColName
	SQLSMALLINT		fieldType;				// pfSqlType
	SQLULEN 		fieldLen;				// pcbColDef
	SQLSMALLINT		decimalDigits;				// pibScale
	SQLSMALLINT		nullable;				// pfNullable
	SQLINTEGER		realRowNum = 0;

	int			recLen;

	char			tmpBuf[8192];

	if ((ret = UnionConnectDB()) < 0)
	{
		UnionUserErrLog("in UnionOpenRealDBSql:: UnionConnectDB!\n");
		return(ret);
	}

	if ((ret = UnionCreateStmtHandle()) < 0)
	{
		UnionUserErrLog("in UnionExecDQLStatement:: UnionCreateStmtHandle() =[%d] Error !\n", ret);
		goto freeStmt;
	}

	if((g_sqlret = SQLPrepare(g_stmt_handle, (SQLCHAR*)sql, SQL_NTS)) != SQL_SUCCESS)
	{
		ret = UnionCheckDB2STMTError("SQLPrepare");
		UnionUserErrLog("in UnionExecDQLStatement::SQLPrepare sqlStr=[%s] Error !\n", sql);
		goto freeStmt;
	}

	colNum = 0;

	//获取结果集列数
	g_sqlret = SQLNumResultCols(g_stmt_handle, &colNum);

	if(g_sqlret != SQL_SUCCESS)
	{
		ret = UnionCheckDB2STMTError("SQLNumResultCols");
		UnionUserErrLog("in UnionExecDQLStatement:: SQLNumResultCols g_sqlret = %d, ret = %d\n", g_sqlret, ret);
		UnionFreeStmtHandle();
		return(g_sqlret);
	}

	gunionDBRecord.colNum = colNum;

	// 获取字段属性
	for(i = 0; i < gunionDBRecord.colNum; i++)
	{
		// 字段属性
		g_sqlret = SQLDescribeCol(g_stmt_handle,			// hstmt
				i + 1,					// icol
				(SQLCHAR*)gunionDBRecord.field[i].tag,		// szColName
				sizeof(gunionDBRecord.field[i].tag),	// cbColNameMax
				&nameLength,				// pcbColName
				&fieldType,				// pfSqlType
				&fieldLen,				// pcbColDef
				&decimalDigits,				// pibScale
				&nullable);				// pfNullable

		if(g_sqlret != SQL_SUCCESS)
		{
			ret = UnionCheckDB2STMTError("SQLDescribeCol");
			UnionUserErrLog("in UnionExecDQLStatement:: SQLDescribeCol g_sqlret = %d ret = %d\n", g_sqlret, ret);
			goto freeStmt;
		}

		// 申请记录空间
		UnionAllocSpaceAndSpecToField(i, fieldType, fieldLen);

		gunionDBRecord.field[i].tag[nameLength] = 0;

		sprintf(gunionDBRecord.field[i].tag, "FIELD%d", i);

		//	UnionLog("UnionConvertObjectFldName, fieldname:%s\n", gunionDBRecord.field[i].tag);
		//	if (gunionCurrentObject != NULL)
		//	{
		//		ret = UnionConvertObjectFldName(gunionCurrentObject, gunionDBRecord.field[i].tag, gunionDBRecord.field[i].tag);

		//		UnionProgramerLog("in UnionExecDQLStatement:: fieldName = [%s] fieldType = [%d] fieldBuf = [%d]\n", gunionDBRecord.field[i].tag, fieldType, fieldLen);
		//	}

		//
	}//end for(i = 0; i < gunionDBRecord.colNum; i++)
	
	g_sqlret = SQLExecute(g_stmt_handle);


	if(g_sqlret != SQL_SUCCESS)
	{
		ret = UnionCheckDB2STMTError("SQLExecute");
		UnionUserErrLog("in UnionExecDQLStatement:: SQLExecute g_sqlret = %d\n", g_sqlret);
		goto freeRecord;
	}


	while ((g_sqlret = SQLFetch(g_stmt_handle)) == SQL_SUCCESS)
	{
		recLen = 0;

		for(j = 0; j < gunionDBRecord.colNum; j++)
		{
			switch(gunionDBRecord.field[j].type)
			{
				case SQL_C_LONG:
				case SQL_C_SBIGINT:
				case SQL_C_SHORT:
				case SQL_C_TINYINT:
				case SQL_C_UBIGINT:
				case SQL_C_UTINYINT:
				case SQL_DECIMAL:
				case SQL_C_NUMERIC:
					ret = sprintf(tmpBuf + recLen, "%s=%d|", gunionDBRecord.field[j].tag, (int)*gunionDBRecord.field[j].value.intValue);
					recLen += ret;
					break;

				case SQL_C_DOUBLE:
				case SQL_C_FLOAT:
					ret = sprintf(tmpBuf + recLen, "%s=%.2f|", gunionDBRecord.field[j].tag, *(double *)gunionDBRecord.field[j].value.intValue);
					recLen += ret;
					break;

				default:
					//gunionDBRecord.field[j].type 
					UnionRTrim(gunionDBRecord.field[j].value.strValue);
					ret = sprintf(tmpBuf + recLen, "%s=%s|", gunionDBRecord.field[j].tag, gunionDBRecord.field[j].value.strValue);
					recLen += ret;

					break;
			}
		}

		tmpBuf[recLen] = 0;

		strncpy(record, tmpBuf, sizeOfRecord);
		UnionProgramerLog("in UnionOpenRealDBSql:: record:: [%s]!\n", record);
		break;
	}//end while ((g_sqlret = SQLFetch(g_stmt_handle)) == SQL_SUCCESS)

	if(g_sqlret == SQL_NO_DATA_FOUND)
	{
		UnionLog("in UnionOpenRealDBSql::no data found from [%s]!\n", sql);
	}

	if(g_sqlret != SQL_SUCCESS && g_sqlret != SQL_NO_DATA_FOUND)
	{
		ret = UnionCheckDB2STMTError("SQLExecute");
		UnionUserErrLog("in UnionOpenRealDBSql:: SQLExecute g_sqlret = %d\n", g_sqlret);
	}

	UnionAuditLog("in  UnionExecDQLStatement:: recLen = %d, realRowNum = %d!!!!!!!!!!! \n", recLen, realRowNum);

	ret = 0;
freeRecord:
	// 释放记录空间
	UnionFreeDBRecordSpace();
freeStmt:
	SQLFreeStmt(g_stmt_handle, SQL_CLOSE);
	UnionProgramerLog("in UnionOpenRealDBSql::sql=[%s] ret = %d\n", sql, ret);
	return(ret);

}

int UnionSelectRealDBRecord(char *tableName,char *field,char *condition,char *record,int sizeOfRecord,char *fileName)
{
	int     numOfPerPage = 0, currPage = 0, isUseNewMech = -9;
	int     beginNum = 0;
	int 	endNum = 0;
	char    tmpStr[20+1];
	int	ret = -1;
	//int	sqlLen;
	char	*fieldPtr = NULL;
	char	fieldList[1024+1];
	char	sqlSelect[1024+1];
	int	totalRecNum = -1;
	char    primaryList[256];
	
	memset(&gunionCurrentObject,0,sizeof(gunionCurrentObject));

	if ((ret = UnionConnectDB()) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecord:: UnionConnectDB ret = [%d]\n",ret);
		return(ret);
	}

	memset(tmpStr, 0, sizeof tmpStr);
	
	if (UnionReadRecFldFromRecStr(condition,strlen(condition),"currentPage",tmpStr,sizeof(tmpStr)) < 0)
	{
		isUseNewMech=0;
	}
	else
	{
		currPage = atoi(tmpStr);
	}

	memset(tmpStr, 0, sizeof tmpStr);

	if (UnionReadRecFldFromRecStr(condition,strlen(condition),"numOfPerPage",tmpStr,sizeof(tmpStr)) < 0)
	{
		isUseNewMech=0;
	}
	else
	{
		numOfPerPage = atoi(tmpStr);
	}
	if (isUseNewMech)
	{
		beginNum = (currPage-1)*numOfPerPage+1;
		endNum = beginNum + numOfPerPage-1;
	}

	UnionDeleteRecFldFromRecStr(condition,"currentPage");
	UnionDeleteRecFldFromRecStr(condition,"numOfPerPage");

	memset(sqlSelect,0,sizeof(sqlSelect));

	if (isUseNewMech)
	{
		ret = UnionSelectRealDBRecordCounts(tableName, condition);

		if(ret < 0)
		{
			UnionUserErrLog("in UnionSelectRealDBRecord:: UnionSelectRealDBRecordCounts ret = [%d]\n",ret);
			return(ret);
		}
		else
		{
			totalRecNum = ret;
		}

		if ((condition == NULL) || (strlen(condition) == 0))
		{
			if (strcmp(field, "*") != 0)
				sprintf(sqlSelect, "select %s from (select %s,rownum r from (select %s from %s",field,field,field,tableName);
			else
				sprintf(sqlSelect, "select %s from (select a.%s,rownum r from (select * from %s",field,field,tableName);
		}
		else
		{
			if (strcmp(field, "*") != 0)
				sprintf(sqlSelect, "select %s from (select %s,rownum r from (select %s from %s where %s",
					field,field,field,tableName,condition);
			else
				sprintf(sqlSelect, "select %s from (select a.%s,rownum r from (select * from %s where %s",
					field,field,tableName,condition);
		}
		if ((fileName != NULL) && (strlen(fileName) != 0))
		{
			if (strstr(sqlSelect, "order by") == NULL)
			{
				memset(primaryList, 0, sizeof(primaryList));
				if (UnionFormTablePrimaryKeyList(tableName, primaryList) > 0)
				{
					sprintf(sqlSelect + strlen(sqlSelect), " order by %s", primaryList);
				}
			}
		}

		sprintf(sqlSelect, "%s) a  where rownum<=%d) where r>=%d ", sqlSelect, endNum, beginNum);

	}//end if(isUseNewMech)
	else 
	{
		if (strcmp(field, "*") == 0)
		{
			memset(fieldList, 0, sizeof(fieldList));
			//if((fieldPtr = UnionGetTableSelectFieldFromImage(tableName, fieldList)) == NULL)
			if((ret = UnionGetTableSelectFieldFromImage(tableName, fieldList)) < 0)
			{
				fieldPtr = "*";
			}
			fieldPtr = fieldList;
		}
		else
		{
			fieldPtr = field;
		}
		if ((condition == NULL) || (strlen(condition) == 0))
		{
			sprintf(sqlSelect, "select %s from %s", fieldPtr, tableName);
		}
		else
		{
			sprintf(sqlSelect, "select %s from %s where %s",fieldPtr, tableName, condition);
		}

		if ((fileName != NULL) && (strlen(fileName) != 0))
		{

			if (strstr(sqlSelect, "order by") == NULL)
			{
				memset(primaryList, 0, sizeof(primaryList));

				if (UnionFormTablePrimaryKeyList(tableName, primaryList) > 0)
				{
					snprintf(sqlSelect + strlen(sqlSelect), 200, " order by %s", primaryList);
				}
			}

		}

	}//end else(isUseNewMech)

	//sql语句拼装完成
	UnionProgramerLog("in UnionSelectRealDBRecord:: sqlSelect = [%s]\n",sqlSelect);

	//根据对象名，读取该对象的定义
	if ((gunionCurrentObject = UnionFindTableDef(tableName)) == NULL)
	{
		UnionUserErrLog("in UnionSelectRealDBRecord:: UnionFindTableDef fail! \n");
		return(-1);
	}

	ret = UnionExecDQLStatement(sqlSelect, totalRecNum, record, sizeOfRecord, fileName);

	gunionCurrentObject = NULL;

	UnionAuditLog("in UnionSelectRealDBRecord::ret:%d\n", ret);

	return(ret);
}

int UnionSelectRealDBRecordCounts(char *tableName,char *condition)
{
	char    tmpStr[20+1];
	char    tmpBuf[1024+1];
	int     ret;
	int	count = 0;
	char    sql[2048+1];

	if ((ret = UnionConnectDB()) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecordCounts:: UnionConnectDB!\n");
		return(ret);
	}

	memset(tmpStr, 0, sizeof(tmpStr));
	memset(tmpBuf, 0, sizeof(tmpBuf));
	memset(sql, 0, sizeof(sql));

	if ((condition == NULL) || (strlen(condition) == 0))
		sprintf(sql,"select count(1) from %s",tableName);
	else
		sprintf(sql,"select count(1) from %s where %s",tableName, condition);

	UnionLog("in UnionSelectRealDBRecordCounts:: sql=[%s]\n",sql);
	
	gunionCurrentObject = NULL;
	ret = UnionExecDQLStatement (sql, 1, tmpBuf, sizeof(tmpBuf) - 1, NULL);

	if((ret = UnionReadRecFldFromRecStr(tmpBuf, strlen(tmpBuf), "FIELD0", tmpStr, sizeof(tmpStr))) < 0)
	{
		UnionUserErrLog("in UnionSelectRealDBRecordCounts:: UnionReadRecFldFromRecStr str = [%s]!\n", tmpBuf);
		return(ret);
	}

	count = atoi(tmpStr);

	UnionLog("in UnionSelectRealDBRecordCounts:: returnStr = [%s] count=[%d]\n", tmpBuf, count);

	return(count);
}

int UnionUpdateRealDBRecord(char *tableName,char *field,char *condition)
{
	int	ret;

	char	sql[8192*2+1];
	
	if ((ret = UnionConnectDB()) < 0)
	{
		UnionLog("in UnionUpdateRealDBRecord:: UnionConnectDB!\n");
		return(ret);
	}

	memset(sql,0,sizeof(sql));

	if ((condition == NULL) || (strlen(condition) == 0))
		sprintf(sql,"update %s set %s",tableName,field);
	else
		sprintf(sql,"update %s set %s where %s",tableName,field,condition);
	
	ret = UnionExecDMLStatement(sql);	

	UnionProgramerLog("in UnionUpdateRealDBRecord::sql=[%s] ret = %d!\n", sql, ret);

	return(ret);
}

int UnionInsertRealDBRecord(char *tableName,char *record,int lenOfRecord)
{
	int	ret;

	char	sql[8192*2+1];
	
	if ((ret = UnionConnectDB()) < 0)
	{
		UnionLog("in UnionInsertRealDBRecord:: UnionConnectDB!\n");
		return(ret);
	}

	memset(sql,0,sizeof(sql));

	sprintf(sql,"insert into %s %s",tableName,record);
	
	ret = UnionExecDMLStatement(sql);

	UnionProgramerLog("in UnionInsertRealDBRecord::sql=[%s] ret = %d\n", sql, ret);

	return(ret);
	
}

int UnionDeleteRealDBRecord(char *tableName,char *condition)
{
	int	ret;

	char	sql[1024+1];
	
	if ((ret = UnionConnectDB()) < 0)
	{
		UnionLog("in UnionDeleteRealDBRecord:: UnionConnectDB!\n");
		return(ret);
	}

	memset(sql,0,sizeof(sql));
	if ( (condition == NULL) || (strlen(condition) == 0))
		sprintf(sql,"delete from %s",tableName);
	else
		sprintf(sql,"delete from %s where %s",tableName,condition);

	ret = UnionExecDMLStatement(sql);	

	UnionProgramerLog("in UnionDeleteRealDBRecord::sql=[%s] ret = %d\n", sql, ret);
	return(ret);
}

int UnionExecRealDBSql(char *sql)
{
	int		ret;

	if ((ret = UnionConnectDB()) < 0)
	{
		UnionLog("in UnionExecRealDBSql:: UnionConnectDB!\n");
		return(ret);
	}

	UnionExecDMLStatement(sql);	

	UnionProgramerLog("in UnionExecRealDBSql::sql=[%s] ret = %d\n", sql, ret);

	return(ret);
}

int UnionCheckErrorForType(char *msg, SQLSMALLINT htype, SQLHANDLE hndl)
{
	int		ret;
	//char		msgStr[256];

	short		recnumber = 1; 
	SQLCHAR		sqlstate[SQL_SQLSTATE_SIZE + 1]; 
	SQLINTEGER	sqlcode = 0; 
	SQLCHAR		buffer[SQL_MAX_MESSAGE_LENGTH + 1]; 

	if(g_sqlret == 0)
	{
		return(0);
	}
	else
	{
		UnionAuditLog("in %s:: g_sqlret = [%d]\n", msg, g_sqlret);
	}

	ret = UnionSetUserDefinedErrorCode(UnionConvertDB2ErrCodeIntoEsscErrCode(g_sqlret));
	
	UnionUserErrLog("in UnionCheckErrorForType:: --- db2 error report begin ---\n");
	while(1)
	{ 
		//调用函数SQLGetDiagRec诊断错误，并打印错误代码，类型等
		g_sqlret = SQLGetDiagRec(htype, hndl, recnumber, sqlstate, &sqlcode, buffer, SQL_MAX_MESSAGE_LENGTH + 1, NULL); 
		if (g_sqlret != SQL_SUCCESS)
		{
			UnionUserErrLog("in UnionCheckErrorForType:: SQLGetDiagRec g_sqlret = %d\n", g_sqlret);
			break;
		}
		UnionUserErrLog("DB2:: SQLSTATE: [%s], Native Error Code: [%d], MESSAGE: [%s]\n", sqlstate, sqlcode, buffer);
		recnumber = recnumber + 1; 
	} 
	UnionUserErrLog("in UnionCheckErrorForType:: --- db2 error report End ---\n");

	UnionCloseDBBySpecErrCode(ret);

	return(ret);
}

int UnionCheckDB2ENVError(char *msg)
{
	return(UnionCheckErrorForType(msg, SQL_HANDLE_ENV, g_env_handle));
}

int UnionCheckDB2DBCError(char *msg)
{
	return(UnionCheckErrorForType(msg, SQL_HANDLE_DBC, g_conn_handle));
}

int UnionCheckDB2STMTError(char *msg)
{
	return(UnionCheckErrorForType(msg, SQL_HANDLE_STMT, g_stmt_handle));
}

int UnionConvertDB2ErrCodeIntoEsscErrCode(int sqlcode)
{
	//UnionLog("in UnionConvertDB2ErrCodeIntoEsscErrCode:: sqlcode=%d\n", sqlcode);
	switch(abs(sqlcode))
	{

		case 0:
			return(0);
		case 100:
			return errCodeRecordNotFound;
		case 803:
			return errCodeRecordAlreadyExist;
		case 1224:
		case 1024:
			return errCodeConnectFailed;
		default:
			return errCodeSQLExec;
	}
}

//处理insert update delete ...
int UnionExecDMLStatement(const char* sql)
{
	assert(sql != NULL);

	int ret               = 0;

	SQLINTEGER realRowNum = 0;

	UnionLog("in UnionExecDMLStatement:: exec sql [%s]\n", sql);
	
	do
	{
		if ((ret = UnionCreateStmtHandle()) < 0)
		{
			UnionUserErrLog("in UnionExecDMLStatement:: UnionCreateStmtHandle()=[%d] Error \n", ret);	
			break;
		}
		
		if ((g_sqlret = SQLPrepare(g_stmt_handle, (SQLCHAR*)sql, SQL_NTS)) != SQL_SUCCESS)
		{
			ret = UnionCheckDB2STMTError("SQLPrepare");
			UnionUserErrLog("in UnionExecDMLStatement::SQLPrepare sqlStr=[%s] Error !\n", sql);
			break;
		}

		g_sqlret = SQLExecute(g_stmt_handle);

		if(g_sqlret != SQL_SUCCESS)
		{
			ret = UnionCheckDB2STMTError("SQLExecute");
			UnionUserErrLog("in  UnionExecDMLStatement:: SQLExecute g_sqlret = %d\n", g_sqlret);
			break;
		}

		g_sqlret = SQLRowCount(g_stmt_handle, (SQLLEN*)&realRowNum);

		if(g_sqlret != SQL_SUCCESS)
		{
			ret = UnionCheckDB2STMTError("SQLRowCount");
			UnionUserErrLog("in UnionExecDMLStatement:: SQLRowCount g_sqlret = %d, ret = %d\n", g_sqlret, ret);
			break;
		}

		UnionProgramerLog("in UnionExecDMLStatement:: exec(insert,update,delete) realRowNum = [%d] g_sqlret = %d\n", realRowNum, g_sqlret);

		ret = realRowNum;
	}
	while(0);

	UnionFreeStmtHandle();

	return ret;
}

int UnionExecDQLStatement(const char* sql, int selectRecNum, char* recBuf, int sizeofBuf, const char* fileName)
{
	int			ret, i, j;

	int                     isUseNewMech = 1;

	SQLSMALLINT 		colNum = 0;
	//int			rowNum = 0;

	SQLSMALLINT		nameLength;				// pcbColName
	SQLSMALLINT		fieldType;				// pfSqlType
	SQLULEN 		fieldLen;				// pcbColDef
	SQLSMALLINT		decimalDigits;				// pibScale
	SQLSMALLINT		nullable;				// pfNullable
	SQLINTEGER		realRowNum = 0;

	int			recLen;

	FILE			*fp = NULL;

	char			tmpBuf[8192];

	//int			sqlIters = 0;

	UnionLog("in UnionExecDQLStatement:: exec sql [%s]\n", sql);

	if(fileName != NULL)
	{
		if ((fp = fopen(fileName, "w")) == NULL)
		{
			ret = UnionSetUserDefinedErrorCode(errCodeUseOSErrCode);
			UnionUserErrLog("in UnionExecDQLStatement:: fopen [%s] error\n", fileName);
			return(ret);
		}

		if(selectRecNum == 0) // 没有记录
		{
			ret = 0;
			UnionProgramerLog("in UnionExecDQLStatement:: BatchSelect sql = [%s] recNum = 0\n", sql);
			goto closefile;
		}
	}


	if ((ret = UnionCreateStmtHandle()) < 0)
	{
		UnionUserErrLog("in UnionExecDQLStatement:: UnionCreateStmtHandle() =[%d] Error !\n", ret);
		goto closefile;
	}

	if((g_sqlret = SQLPrepare(g_stmt_handle, (SQLCHAR*)sql, SQL_NTS)) != SQL_SUCCESS)
	{
		ret = UnionCheckDB2STMTError("SQLPrepare");
		UnionUserErrLog("in UnionExecDQLStatement::SQLPrepare sqlStr=[%s] Error !\n", sql);
		goto freeStmt;
	}

	//UnionProgramerLog("in UnionExecDBStatement:: SQLPrepare ret = %d \n", g_sqlret);

	colNum = 0;

	//获取结果集列数
	g_sqlret = SQLNumResultCols(g_stmt_handle, &colNum);

	if(g_sqlret != SQL_SUCCESS)
	{
		ret = UnionCheckDB2STMTError("SQLNumResultCols");
		UnionUserErrLog("in UnionExecDQLStatement:: SQLNumResultCols g_sqlret = %d, ret = %d\n", g_sqlret, ret);
		UnionFreeStmtHandle();
		return(g_sqlret);
	}

	gunionDBRecord.colNum = colNum;
	//UnionProgramerLog("in UnionExecDBStatement:: gunionDBRecord.colNum = [%d]!\n", gunionDBRecord.colNum);

	realRowNum = 0;

	//UnionLog("gunionDBRecord.colNum:%d\n", colNum);

	// 获取字段属性
	for(i = 0; i < gunionDBRecord.colNum; i++)
	{
		// 字段属性
		g_sqlret = SQLDescribeCol(g_stmt_handle,			// hstmt
				i + 1,					// icol
				(SQLCHAR*)gunionDBRecord.field[i].tag,		// szColName
				sizeof(gunionDBRecord.field[i].tag),	// cbColNameMax
				&nameLength,				// pcbColName
				&fieldType,				// pfSqlType
				&fieldLen,				// pcbColDef
				&decimalDigits,				// pibScale
				&nullable);				// pfNullable

		if(g_sqlret != SQL_SUCCESS)
		{
			ret = UnionCheckDB2STMTError("SQLDescribeCol");
			UnionUserErrLog("in UnionExecDQLStatement:: SQLDescribeCol g_sqlret = %d ret = %d\n", g_sqlret, ret);
			goto freeStmt;
		}
		
		// 申请记录空间
		UnionAllocSpaceAndSpecToField(i, fieldType, fieldLen);

		gunionDBRecord.field[i].tag[nameLength] = 0;

		if(strchr((char *)gunionDBRecord.field[i].tag, ')') != NULL || UnionIsDigitString(gunionDBRecord.field[i].tag))


		{
			sprintf(gunionDBRecord.field[i].tag, "FIELD%d", i);
		}

///		UnionLog("UnionConvertObjectFldName, fieldname:%s\n", gunionDBRecord.field[i].tag);

		if (gunionCurrentObject != NULL)
		{
			ret = UnionConvertObjectFldName(gunionCurrentObject, gunionDBRecord.field[i].tag, gunionDBRecord.field[i].tag);
			UnionProgramerLog("in UnionExecDQLStatement:: fieldName = [%s] fieldType = [%d] fieldBuf = [%d]\n", gunionDBRecord.field[i].tag, fieldType, fieldLen);
		}

	}//end for(i = 0; i < gunionDBRecord.colNum; i++)
	
//	UnionProgramerLog("in:: UnionExecDQLStatement begin SQLExecute record!\n");
	
	g_sqlret = SQLExecute(g_stmt_handle);


	if(g_sqlret != SQL_SUCCESS)
	{
		ret = UnionCheckDB2STMTError("SQLExecute");
		UnionUserErrLog("in UnionExecDQLStatement:: SQLExecute g_sqlret = %d\n", g_sqlret);
		goto freeRecord;
	}


	while ((g_sqlret = SQLFetch(g_stmt_handle)) == SQL_SUCCESS)
	{
		recLen = 0;

		for(j = 0; j < gunionDBRecord.colNum; j++)
		{
			switch(gunionDBRecord.field[j].type)
			{
				case SQL_C_LONG:
				case SQL_C_SBIGINT:
				case SQL_C_SHORT:
				case SQL_C_TINYINT:
				case SQL_C_UBIGINT:
				case SQL_C_UTINYINT:
				case SQL_DECIMAL:
				case SQL_C_NUMERIC:
					ret = sprintf(tmpBuf + recLen, "%s=%d|", gunionDBRecord.field[j].tag, (int)*gunionDBRecord.field[j].value.intValue);
					recLen += ret;
					break;

				case SQL_C_DOUBLE:
				case SQL_C_FLOAT:
					ret = sprintf(tmpBuf + recLen, "%s=%.2f|", gunionDBRecord.field[j].tag, *(double *)gunionDBRecord.field[j].value.intValue);
					recLen += ret;
					break;

				default:
					//gunionDBRecord.field[j].type 
					UnionRTrim(gunionDBRecord.field[j].value.strValue);
					ret = sprintf(tmpBuf + recLen, "%s=%s|", gunionDBRecord.field[j].tag, gunionDBRecord.field[j].value.strValue);
					recLen += ret;

					break;
			}
		}//end for

		UnionClearDBRecordSpace();

		tmpBuf[recLen] = 0;

		realRowNum++;
		
		if(fp != NULL)
		{
			//UnionProgramerLog("in UnionExecDBStatement:: record[%08d]:: [%s]!\n", i, tmpBuf);
			fprintf(fp, "%s\n", tmpBuf);
		}
		else
		{
			if (realRowNum > 1)
			{
				ret = -1;
				goto freeStmt;	
			}

			strncpy(recBuf, tmpBuf, sizeofBuf);
			UnionProgramerLog("in UnionExecDQLStatement:: record:: [%s]!\n", recBuf);
			break;
		}


	}//end while ((g_sqlret = SQLFetch(g_stmt_handle)) == SQL_SUCCESS)


	if(g_sqlret != SQL_SUCCESS && g_sqlret != SQL_NO_DATA_FOUND)
	{
		ret = UnionCheckDB2STMTError("SQLExecute");
		UnionUserErrLog("in UnionExecDQLStatement:: SQLExecute g_sqlret = %d\n", g_sqlret);
	}


	UnionAuditLog("in  UnionExecDQLStatement:: recLen = %d, realRowNum = %d!!!!!!!!!!! \n", recLen, realRowNum);

	ret = realRowNum;

freeRecord:
	// 释放记录空间
	UnionFreeDBRecordSpace();

freeStmt:
	SQLFreeStmt(g_stmt_handle, SQL_CLOSE);
closefile:
	if(fp != NULL)
	{
		if(isUseNewMech && (selectRecNum >= 0))
		{
			memset(tmpBuf, 0, sizeof(tmpBuf));
			sprintf(tmpBuf, "%s=%d", "totalRecNum", selectRecNum);
			fputs(tmpBuf, fp);
		}

		fflush(fp);
		fclose(fp);
		return(ret);
	}
	else
	{
		return strlen(recBuf);
	}

	return(ret);

}

int UnionCloseDBBySpecErrCode(int dbErrCode)
{
	//int	ret;
	char	varName[100];

	memset(varName, 0, sizeof varName);

	sprintf(varName,"fatalODBC%d",abs(dbErrCode));

	if (UnionReadIntTypeRECVar(varName) > 0)
		UnionCloseDB();

	return 0;
}

int UnionSelectOneFieldBySQL(char *fldDescription, char *tableName, char *condition, int lenOfResultBuf, char *resultBuf)
{
	int			ret;
	
	
	char			sql[2048];
	char			result[4096];
	
	if ((ret = UnionConnectDB()) < 0)
	{
		UnionUserErrLog("in UnionSelectOneFieldBySQL:: UnionConnectDatabase ret = %d!\n", ret);
		return(ret);
	}
	
	memset(sql, 0, sizeof(sql));
	memset(result, 0, sizeof(result));
	if(condition == NULL || strlen(condition) == 0)
	{
		sprintf(sql, "select %s from %s", fldDescription, tableName);
	}
	else
	{
		sprintf(sql, "select %s from %s where %s", fldDescription, tableName, condition);
	}

	UnionProgramerLog("in UnionSelectOneFieldBySQL:: excute sql = [%s]!\n", sql);

	ret = UnionExecDQLStatement(sql, 1, result, sizeof(result), NULL);
	UnionRTrim(result);

	if ((ret = sscanf(result, "%*[^=]=%50[^|]", resultBuf)) == 0)
	{
		UnionUserErrLog("in UnionSelectOneFieldBySQL:: result = %s  format error !\n", result);
	}
	
	UnionProgramerLog("in UnionSelectOneFieldBySQL:: reslut str= [%s] ret = %d!\n", resultBuf, ret);

	return(ret);
}

int UnionSelectDBRecordByRealSQL(char *tableName, char *strSql, char *record, int sizeOfRecord, char *fileName)
{
	int	ret;
	
	if ((ret = UnionConnectDB()) < 0)
	{
		UnionUserErrLog("in UnionOpenRealDBSql:: UnionConnectDB!\n");
		return(ret);
	}

	if ((gunionCurrentObject = UnionFindTableDef(tableName)) == NULL)
	{
		ret = UnionSetUserDefinedErrorCode(errCodeParameter);
		UnionUserErrLog("in UnionSelectDBRecordByRealSQL:: UnionFindTableDef fail! \n");
		return(ret);
	}

	ret = UnionExecDQLStatement(strSql, -1, record, sizeOfRecord, fileName);

	gunionCurrentObject = NULL;

	UnionProgramerLog("in UnionSelectDBRecordByRealSQL::sql=[%s] ret = %d\n", strSql, ret);


	return(ret);
}

int UnionGetDBSequenceValueOfICCardID(char *certID)
{
	int			ret;

	char			resultBuf[128];

	memset(resultBuf, 0, sizeof(resultBuf));

	if ((ret = UnionSelectOneFieldBySQL("kms_iccard_id.currval", "sys.dual", NULL, sizeof(resultBuf) - 1, resultBuf)) < 0)
	{
		UnionUserErrLog("in UnionGetCurrentDBSequenceValueOfICCardID:: UnionSelectOneFieldBySQL ret = %d!\n", ret);
		return(ret);
	}

	ret = atoi(resultBuf);

	sprintf(resultBuf, "unvarValue = %d", ret);
	//UnionUpdateRealDBRecord("thisKmcInfo", resultBuf, "unvarName = 'currCardSeqNo'");
	sprintf(certID, "%06X", ret);

	UnionProgramerLog("in UnionGetCurrentDBSequenceValueOfICCardID:: certID = [%s]!\n", certID);

	return(6);
}

int UnionIsConnectDBOK()
{
	if (s_unionDatabaseConnected && (s_unionPidConnectToDB == getpid()))
	{
		return(1);
	}
	else
	{
		return(0);
	}
}
