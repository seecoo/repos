// Automatically generated codes
// Generated Date and Time 20090513015919
// Generated by ud090401

#ifndef _unionTeller_
#define _unionTeller_

#define conTBLNameTeller			"operator"
#define conOperatorTypeRunningSystem		5

// 定义表的域名常量
#define conTellerFldNameIdOfTeller		"idOfOperator"
#define conTellerFldNameName		"name"
#define conTellerFldNameLevel		"level"
#define conTellerFldNamePasswordCiper		"passwordCiper"
#define conOperatorFldNamePK            "PK"
#define conTellerFldNameIsCurrentLogon		"isCurrentLogon"
#define conOperatorFldNameLogonTimes            "logonTimes"
#define conOperatorFldNamePasswdMTime           "passwdMTime"
#define conOperatorFldNameLegalClients          "legalClients"
#define conOperatorFldNameViewMenu		"viewMenu"
#define conOperatorFldNameLogonMode		"logonMode"
#define conTellerFldNameRemark		"remark"
#define conTellerFldNameInputTeller		"inputTeller"
#define conTellerFldNameInputDate		"inputDate"
#define conTellerFldNameInputTime		"inputTime"
#define conTellerFldNameUpdateTeller		"updateTeller"
#define conTellerFldNameUpdateDate		"updateDate"
#define conTellerFldNameUpdateTime		"updateTime"


// 定义表记录对应的结构
typedef struct
{
	char	idOfOperator[40+1];	// 用户定义的，用于唯一识别一条记录的名称
	char	name[128+1];	// 用户定义的，用于唯一识别一条记录的名称
	int	level;	// 用户定义的，用于唯一识别一条记录的名称
	char	passwordCiper[128+1];	// 用户定义的，用于唯一识别一条记录的名称
	char	PK[2048+1];	// 操作员的公钥
	int	isCurrentLogon;	// 用户定义的，用于唯一识别一条记录的名称
	int     logonTimes;     // 操作员登录记数
        char    passwdMTime[14+1];      // 密码修改日期
        char    legalClients[512+1];    // 合法客户端
	int	logonMode;	// 操作员登录方式
	char	viewMenu[256+1];	// 存放菜单项的视图菜单	

	char    lastLogonTime[16+1];    // 最近登录时间
        char    lastOperationTime[16+1];        // 最近操作时间

	char	remark[128+1];	// 128个字符的说明
	char	inputTeller[20+1];	// 记录插入数据库时，系统自动附加的操作员标识
	char	inputDate[8+1];	// 记录插入数据库时，系统自动附加的日期
	char	inputTime[6+1];	// 记录插入数据库时，系统自动附加的时间
	char	updateTeller[20+1];	// 记录修改时，系统自动附加的操作员标识
	char	updateDate[8+1];	// 记录修改时，系统自动附加的日期
	char	updateTime[6+1];	// 记录修改时，系统自动附加的时间
} TUnionTeller;
typedef TUnionTeller	*PUnionTeller;

//***** 以下定义函数声明 *****


/*
功能：
	结构的缺省赋值函数
输入参数:
	prec	记录指针
输出参数:
	无
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormDefaultValueOfTellerRec(PUnionTeller prec);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormRecStrFromTellerRec(PUnionTeller prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormTellerRecFromRecStr(char *recStr,int lenOfRecStr,PUnionTeller prec);


/*
功能：
	插入一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionInsertTellerRec(PUnionTeller prec);


/*
功能：
	删除一个记录
输入参数:
	idOfOperator 用户定义的，用于唯一识别一条记录的名称
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionDeleteTellerRec(char *idOfOperator);
/*
函数功能:
	修改指定的表域:
输入参数:
	idOfOperator 用户定义的，用于唯一识别一条记录的名称
	fldName 域名称
	fldValue 域值
	fldValueLen 域值长度
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionUpdateSpecFldOfTellerRec(char *idOfOperator,char *fldName,char *fldValue,int lenOfFldValue);
/*
函数功能:
	修改指定的表域:
输入参数:
	idOfOperator 用户定义的，用于唯一识别一条记录的名称
	fldName 域名称
	fldValue 域值
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionUpdateIntTypeSpecFldOfTellerRec(char *idOfOperator,char *fldName,int fldValue);


/*
功能：
	修改一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionUpdateTellerRec(PUnionTeller prec);


/*
功能：
	读取一个记录
输入参数:
	idOfOperator 用户定义的，用于唯一识别一条记录的名称
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionReadTellerRec(char *idOfOperator,PUnionTeller prec);


/*
功能：
	读取一个记录
输入参数:
	idOfOperator 用户定义的，用于唯一识别一条记录的名称
	fldName		域名
	sizeOfBuf	域值缓冲大小
输出参数:
	fldValue	域值
返回值
	>=0		成功，返回域值的长度
	<0		失败,错误码
*/
int UnionReadTellerRecFld(char *idOfOperator,char *fldName,char *fldValue,int sizeOfBuf);


/*
功能：
	读取一个记录
输入参数:
	idOfOperator 用户定义的，用于唯一识别一条记录的名称
	fldName		域名
输出参数:
	fldValue	域值
返回值
	>=0		成功，返回域值的长度
	<0		失败,错误码
*/
int UnionReadTellerRecIntTypeFld(char *idOfOperator,char *fldName,int *fldValue);

//***** 函数声明结束 *****

#endif
