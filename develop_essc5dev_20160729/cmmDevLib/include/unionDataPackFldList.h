// Automatically generated codes
// Generated Date and Time 20100204104503
// Generated by ud090401

#ifndef _unionDataPackFldList_
#define _unionDataPackFldList_

// ARC
#define conDataPackFldListConEsscARC	429
// ARC
#define conDataPackFldListConEsscFldARC	315
// ARPC
#define conDataPackFldListConEsscARPC	428
// ARPC
#define conDataPackFldListConEsscFldARPC	314
// ARQC
#define conDataPackFldListConEsscARQC	427
// ARQC
#define conDataPackFldListConEsscFldARQC	313
// HASH数据，2008/4/10，added
#define conDataPackFldListConEsscFldHashData	83
// Hash摘要，2008/4/10，added
#define conDataPackFldListConEsscFldHashDegist	84
// IBM
#define conDataPackFldListConEsscFldIBMPinOffset	37
// LMK0203加密的PIN密文
#define conDataPackFldListConEsscFldEncryptedPinByLMK0203	35
// MAC
#define conDataPackFldListConEsscFldMac	22
// MAC数据
#define conDataPackFldListConEsscFldMacData	21
// PINOffset
#define conDataPackFldListConEsscFldPinOffset	32
// PIN的长度
#define conDataPackFldListConEsscFldForPinLength	205
// PIN密文的格式
#define conDataPackFldListConEsscFldPinCiperFormat	500
// PIN明文
#define conDataPackFldListConEsscFldPlainPin	31
// PK的编码方式
#define conDataPackFldListConEsscFldPKCodingMethod	212
// RSAPK加密的PIN
#define conDataPackFldListConEsscFldPinByRsaPK	38
// Visa
#define conDataPackFldListConEsscFldVisaPVV	36
// VisaCVV
#define conDataPackFldListConEsscFldVisaCVV	71
// ZAK
#define conDataPackFldListConEsscFldZakByZmk	23
// ZMK密钥的名称
#define conDataPackFldListConEsscFldZMKName	11
// ZPK1加密的PIN密文
#define conDataPackFldListConEsscFldEncryptedPinByZPK1	33
// ZPK2加密的PIN密文
#define conDataPackFldListConEsscFldEncryptedPinByZPK2	34
// ZPK加密的PIN密文
#define conDataPackFldListConEsscFldEncryptedPinByZPK	33
// 报文域最大个数
#define conDataPackFldListConMaxNumOfEsscFldTag	256
// 备注信息
#define conDataPackFldListConEsscFldRemark	998
// 参考数据
#define conDataPackFldListConEsscFldRefrenceNumber	206
// 初始向量
#define conDataPackFldListConEsscFldIV	213
// 错误码描述
#define conDataPackFldListConEsscFldErrorCodeRemark	999
// 当前管理的应用编号
#define conDataPackFldListConEsscFldIDOfAppManaged	222
// 第二个PIN密文的格式
#define conDataPackFldListConEsscFldSecondPinCiperFormat	501
// 第二个ZMK密钥的名称
#define conDataPackFldListConEsscFldSecondZMKName	12
// 第二个工作密钥的名称
#define conDataPackFldListConEsscFldSecondWKName	2
// 第二个节点标识
#define conDataPackFldListConEsscFldSecondNodeID	402
// 第二个密钥校验值
#define conDataPackFldListConEsscFldSecondKeyCheckValue	52
// 第二个密钥值
#define conDataPackFldListConEsscFldSecondKeyValue	62
// 第二个证书格式
#define conDataPackFldListConEsscSecondCertificateFormat	421
// 第二种算法标志
#define conDataPackFldListConEsscFldAlgorithm02Mode	215
// 第一个PIN密文的格式
#define conDataPackFldListConEsscFldFirstPinCiperFormat	500
// 第一个ZMK密钥的名称
#define conDataPackFldListConEsscFldFirstZMKName	11
// 第一个工作密钥的名称
#define conDataPackFldListConEsscFldFirstWKName	1
// 第一个节点标识
#define conDataPackFldListConEsscFldFirstNodeID	401
// 第一个密钥校验值
#define conDataPackFldListConEsscFldFirstKeyCheckValue	51
// 第一个密钥值
#define conDataPackFldListConEsscFldFirstKeyValue	61
// 第一个证书格式
#define conDataPackFldListConEsscFirstCertificateFormat	420
// 第一种算法标志
#define conDataPackFldListConEsscFldAlgorithm01Mode	214
// 服务代码
#define conDataPackFldListConEsscFldServiceID	73
// 记录数量
#define conDataPackFldListConEsscFldRecordNumber	416
// 节点标识
#define conDataPackFldListConEsscFldNodeID	401
// 卡有效期
#define conDataPackFldListConEsscFldCardPeriod	72
// 离散次数
#define conDataPackFldListConEsscDisperseTimes	425
// 离散数据
#define conDataPackFldListConEsscDisperseData	426
// 密码机IP地址列表
#define conDataPackFldListConEsscFldHsmIPAddrList	211
// 密码机号
#define conDataPackFldListConEsscFldHsmGrpID	201
// 密文数据
#define conDataPackFldListConEsscFldCiperData	82
// 密钥版本号
#define conDataPackFldListConEsscFldKeyVersion	410
// 密钥长度
#define conDataPackFldListConEsscFldLengthOfKey	208
// 密钥长度标识
#define conDataPackFldListConEsscFldKeyLenFlag	203
// 密钥的名称
#define conDataPackFldListConEsscFldKeyName	1
// 密钥发布日期
#define conDataPackFldListConEsscFldKeyReleaseDate	413
// 密钥类型标识
#define conDataPackFldListConEsscFldKeyTypeFlag	221
// 密钥明文值
#define conDataPackFldListConEsscFldKeyPlainValue	414
// 密钥生效日期
#define conDataPackFldListConEsscFldKeyActiveDate	411
// 密钥失效日期
#define conDataPackFldListConEsscFldKeyInactiveDate	412
// 密钥属主
#define conDataPackFldListConEsscFldKeyContainer	202
// 密钥索引
#define conDataPackFldListConEsscFldKeyIndex	210
// 密钥校验值
#define conDataPackFldListConEsscFldKeyCheckValue	51
// 密钥值
#define conDataPackFldListConEsscFldKeyValue	61
// 密钥值的表示方法
#define conDataPackFldListConEsscFldKeyValueFormat	419
// 明文数据
#define conDataPackFldListConEsscFldPlainData	81
// 模板标识
#define conDataPackFldListConEsscFldKeyModuleID	415
// 批量记录串
#define conDataPackFldListConEsscFldRecordList	417
// 签名
#define conDataPackFldListConEsscFldSign	92
// 签名数据
#define conDataPackFldListConEsscFldSignData	91
// 签名数据的填充方式
#define conDataPackFldListConEsscFldSignDataPadFlag	93
// 数据域
#define conDataPackFldListConEsscFldData	81
// 算法标志
#define conDataPackFldListConEsscFldAlgorithmMode	214
// 随机数
#define conDataPackFldListConEsscFldRandNum	303
// 随机数1
#define conDataPackFldListConEsscFldRandNum1	303
// 随机数2
#define conDataPackFldListConEsscFldRandNum2	304
// 随机数3
#define conDataPackFldListConEsscFldRandNum3	305
// 特殊方式加密的PIN密文，此处仅定义偏移量
#define conDataPackFldListConEsscFldOffsetOfSpecPINCipher	600
// 唯一ID
#define conDataPackFldListConEsscFldUniqueID	301
// 唯一ID的长度
#define conDataPackFldListConEsscFldLenOfUniqueID	302
// 唯一记录串
#define conDataPackFldListConEsscFldRecordStr	418
// 为远程密钥服务器的标志
#define conDataPackFldListConEsscFldForRemoteKMSvrFlag	204
// 文件名，含全路径
#define conDataPackFldListConEsscFldFileName	220
// 消息标识，用户自定义，用于在异步通讯时进行消息匹配
#define conDataPackFldListConEsscFldMessageFlag	900
// 应用编号
#define conDataPackFldListConEsscFldIDOfApp	207
// 账号
#define conDataPackFldListConEsscFldAccNo	41
// 账号1
#define conDataPackFldListConEsscFldAccNo1	41
// 账号2
#define conDataPackFldListConEsscFldAccNo2	42
// 证书格式
#define conDataPackFldListConEsscCertificateFormat	420
// 直接的加密机指令
#define conDataPackFldListConEsscFldDirectHsmCmdReq	100
// 直接的加密机指令响应
#define conDataPackFldListConEsscFldDirectHsmCmdRes	101
// 执行指令成功的HSM的数量
#define conDataPackFldListConEsscFldSuccessHsmNum	209
// 资源标识
#define conDataPackFldListConEsscFldResID	997
// 自动赋值的签名
#define conDataPackFldListConEsscFldAutoSignature	300
// 自动签名
#define conDataPackFldListConEsscFldAutoSign	400

// 定义表的域名常量
#define conDataPackFldListFldNameID		"ID"
#define conDataPackFldListFldNameMacroName		"macroName"
#define conDataPackFldListFldNameMacroValue		"macroValue"
#define conDataPackFldListFldNameType		"type"
#define conDataPackFldListFldNameLength		"length"
#define conDataPackFldListFldNameVarName		"varName"
#define conDataPackFldListFldNameVarType		"varType"
#define conDataPackFldListFldNameRemark		"remark"
#define conDataPackFldListFldNameInputTeller		"inputTeller"
#define conDataPackFldListFldNameInputDate		"inputDate"
#define conDataPackFldListFldNameInputTime		"inputTime"
#define conDataPackFldListFldNameUpdateTeller		"updateTeller"
#define conDataPackFldListFldNameUpdateDate		"updateDate"
#define conDataPackFldListFldNameUpdateTime		"updateTime"

/*
*** 结构对应的表信息 ***
表名::          dataPackFldList
表名宏定义::    conTBLNameDataPackFldList
表资源宏定义::  conResIDDataPackFldList
关键字::        ID
*/

// 定义表记录对应的结构
typedef struct
{
	char	ID[40+1];	// 用户定义的，用于唯一识别一条记录的名称
	char	macroName[40+1];	// 宏定义的标识
	int	macroValue;	// 宏定义的标识
	int	type;	// 类型
	int	length;	// 长度
	char	varName[128+1];	// 参数名称
	int	varType;	// 参数类型
	char	remark[128+1];	// 128个字符的说明
	char	inputTeller[20+1];	// 记录插入数据库时，系统自动附加的操作员标识
	char	inputDate[8+1];	// 记录插入数据库时，系统自动附加的日期
	char	inputTime[6+1];	// 记录插入数据库时，系统自动附加的时间
	char	updateTeller[20+1];	// 记录修改时，系统自动附加的操作员标识
	char	updateDate[8+1];	// 记录修改时，系统自动附加的日期
	char	updateTime[6+1];	// 记录修改时，系统自动附加的时间
} TUnionDataPackFldList;
typedef TUnionDataPackFldList	*PUnionDataPackFldList;

//***** 以下定义函数声明 *****


/*
功能：
	结构的缺省赋值函数
输入参数:
	prec	记录指针
输出参数:
	无
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormDefaultValueOfDataPackFldListRec(PUnionDataPackFldList prec);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormRecStrFromDataPackFldListRec(PUnionDataPackFldList prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormPrimaryKeyRecStrFromDataPackFldListRec(PUnionDataPackFldList prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录字串转换为记录结构的关键字的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormPrimaryKeyOfDataPackFldListRecFromRecStr(char *recStr,int lenOfRecStr,PUnionDataPackFldList prec);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	prec	记录指针
	sizeOfBuf	接收记录字串的缓冲的大小
输出参数:
	recStr	记录字串
返回值
	>=0		成功,拼装的记录串的长度
	<0		失败,错误码
*/
int UnionFormNonPrimaryKeyRecStrFromDataPackFldListRec(PUnionDataPackFldList prec,char *recStr,int sizeOfBuf);


/*
功能：
	将记录结构转换为记录字串的函数
输入参数:
	recStr	记录字串
	lenOfRecStr	记录串长度
输出参数:
	prec	记录指针
返回值
	>=0		读出的域数目
	<0		失败,错误码
*/
int UnionFormDataPackFldListRecFromRecStr(char *recStr,int lenOfRecStr,PUnionDataPackFldList prec);


/*
功能：
	插入一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionInsertDataPackFldListRec(PUnionDataPackFldList prec);


/*
功能：
	删除一个记录
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionDeleteDataPackFldListRec(char *ID);
/*
函数功能:
	修改指定的表域:
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
	fldName 域名称
	fldValue 域值
	fldValueLen 域值长度
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionUpdateSpecFldOfDataPackFldListRec(char *ID,char *fldName,char *fldValue,int lenOfFldValue);
/*
函数功能:
	修改指定的表域:
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
	fldName 域名称
	fldValue 域值
输出参数:
	无
返回值:
	>=0 成功
	<0 失败
*/
int UnionUpdateIntTypeSpecFldOfDataPackFldListRec(char *ID,char *fldName,int fldValue);


/*
功能：
	修改一个记录
输入参数:
	prec	记录指针
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionUpdateDataPackFldListRec(PUnionDataPackFldList prec);


/*
功能：
	读取一个记录
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
输出参数:
	prec	记录指针
返回值
	>=0		成功，返回记录的大小
	<0		失败,错误码
*/
int UnionReadDataPackFldListRec(char *ID,PUnionDataPackFldList prec);


/*
功能：
	读取一个记录
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
	fldName		域名
	sizeOfBuf	域值缓冲大小
输出参数:
	fldValue	域值
返回值
	>=0		成功，返回域值的长度
	<0		失败,错误码
*/
int UnionReadDataPackFldListRecFld(char *ID,char *fldName,char *fldValue,int sizeOfBuf);


/*
功能：
	读取一个记录
输入参数:
	ID 用户定义的，用于唯一识别一条记录的名称
	fldName		域名
输出参数:
	fldValue	域值
返回值
	>=0		成功，返回域值的长度
	<0		失败,错误码
*/
int UnionReadDataPackFldListRecIntTypeFld(char *ID,char *fldName,int *fldValue);


/*
功能：
	根据条件，批量读取数据
输入参数:
	condition	条件字串
	maxRecNum		读取的最大记录数量
输出参数:
	recGrp		记录数组
返回值
	>=0		成功,读取的记录数量
	<0		失败,错误码
*/
int UnionBatchReadDataPackFldListRec(char *condition,TUnionDataPackFldList recGrp[],int maxRecNum);

//***** 函数声明结束 *****

#endif
